{"version":3,"sources":["App.scss","components/TitleBar.scss","components/Sidebar.scss","components/RatingsTable.scss","components/charts/Ratings.scss","components/Dashboard.scss","constants/mediaTypes.js","util/fileUpload.js","util/getUniqueMediaTypes.js","components/Uploader.js","components/TitleBar.js","components/RatingsTable.js","components/charts/AverageRatings.js","components/charts/Ratings.js","components/Dashboard.js","util/routes.js","components/Sidebar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","colorBlack","creamYellow","mediaTypes","name","exportName","separator","uploadFile","_callee","file","csv","regenerator_default","a","wrap","_context","prev","next","readFile","sent","abrupt","csvToJson","stop","Promise","resolve","reject","fileReader","FileReader","onloadend","event","content","target","result","onerror","err","readAsText","rawCsv","lines","replace","changeHeaders","v","cleanData","split","console","log","data","headers","map","line","indexLine","obj","currentline","header","indexHeader","push","pop","review","mediaTypeId","findIndex","mediaType","rating","parseInt","runtime","votes","year","imdbRating","parseFloat","dateRated","Date","dateRatedString","getUniqueMediaTypes","ratings","unique","Object","toConsumableArray","Set","sort","Uploader","_ref","setLoaded","setRatings","setLoadedMediaTypes","upload","_ref2","asyncToGenerator","mark","json","document","getElementById","files","sessionStorage","setItem","JSON","stringify","apply","this","arguments","react_default","createElement","className","type","id","onChange","TitleBar","RatingsTable","nextText","style","verticalAlign","previousText","es","columns","Header","accessor","defaultSorted","desc","defaultPageSize","pageSizeOptions","minRows","colors","AverageRatings","ratingsData","ratingsCount","options","plotOptions","bar","dataLabels","position","distributed","backgroundBarOpacity","enabled","formatter","val","Math","round","fontSize","xaxis","categories","labels","title","text","floating","align","color","tooltip","x","show","grid","chart","toolbar","tools","download","series","react_apexcharts_min_default","height","width","Ratings","average","reduce","b","toFixed","countOccurences","ratingsArray","counts","1","2","3","4","5","6","7","8","9","10","i","length","num","arr","routes","icon","path","component","components_charts_Ratings","charts_AverageRatings","SidebarElements","_useState5","useState","find","route","lastPath","window","location","pathname","substr","lastIndexOf","_useState6","slicedToArray","active","setActive","key","Link","to","concat","process","onClick","Checkbox","checked","value","Sidebar","loadedMediaTypes","filterMovies","precheckBoxes","typeId","_useState","_useState2","forceUpdate","setForceUpdate","_useState3","Map","_useState4","checkedItems","setCheckedItems","handleCheckboxChange","isChecked","set","Sidebar_SidebarElements","Sidebar_Checkbox","get","LoadedApp","_useState7","_useState8","filteredRatings","setFilteredRatings","routeComponents","Component","Route","exact","render","src_components_Sidebar","filterMap","filtered","filter","App","loaded","useEffect","sessionRatings","getItem","parse","item","src_components_TitleBar","BrowserRouter","App_LoadedApp","src_components_Uploader","Boolean","hostname","match","ReactDOM","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3e7a60c1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"colorBlack\":\"black\",\"creamYellow\":\"#ffee70\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"colorBlack\":\"black\",\"creamYellow\":\"#ffee70\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"colorBlack\":\"black\",\"creamYellow\":\"#ffee70\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"colorBlack\":\"black\",\"creamYellow\":\"#ffee70\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"colorBlack\":\"black\",\"creamYellow\":\"#ffee70\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"colorBlack\":\"black\",\"creamYellow\":\"#ffee70\"};","const mediaTypes = [\r\n  {\r\n    name: 'Movie',\r\n    exportName: 'movie',\r\n  },\r\n  {\r\n    name: 'TV Movie',\r\n    exportName: 'tvMovie',\r\n  },\r\n  {\r\n    name: 'Series',\r\n    exportName: 'tvSeries',\r\n  },\r\n  {\r\n    name: 'Mini Series',\r\n    exportName: 'tvMiniSeries',\r\n  },\r\n  {\r\n    name: 'Episode',\r\n    exportName: 'tvEpisode',\r\n  },\r\n  {\r\n    name: 'Video',\r\n    exportName: 'video',\r\n  },\r\n  {\r\n    name: 'Short',\r\n    exportName: 'short',\r\n  },\r\n  {\r\n    name: 'TV Short',\r\n    exportName: 'tvShort',\r\n  },\r\n  {\r\n    name: 'TV Special',\r\n    exportName: 'tvSpecial',\r\n  },\r\n  {\r\n    name: 'Video Game',\r\n    exportName: 'videoGame',\r\n  },\r\n];\r\n\r\nexport default mediaTypes;\r\n","import mediaTypes from '../constants/mediaTypes';\r\n\r\nconst separator = '***';\r\n\r\n/**\r\n * Upload Process for File\r\n * @param {Blob} file\r\n * @return {JSON}\r\n */\r\nasync function uploadFile(file) {\r\n  const csv = await readFile(file);\r\n  return csvToJson(csv);\r\n}\r\n\r\n/**\r\n * Read Contents of a File\r\n * @param {Blob} file\r\n * @return {String}\r\n */\r\nfunction readFile(file) {\r\n  return new Promise((resolve, reject) => {\r\n    const fileReader = new FileReader();\r\n    fileReader.onloadend = event => {\r\n      const content = event.target.result;\r\n      resolve(content);\r\n    };\r\n\r\n    fileReader.onerror = err => {\r\n      reject(err);\r\n    };\r\n    fileReader.readAsText(file, 'Windows-1252');\r\n  });\r\n}\r\n\r\n/**\r\n * Translate CSV to JSON\r\n * @param {String} rawCsv\r\n * @return {JSON}\r\n */\r\nfunction csvToJson(rawCsv) {\r\n  const csv = cleanData(rawCsv);\r\n\r\n  const lines = csv.split('\\n');\r\n  console.log(lines[0]);\r\n  let result = [];\r\n  const headers = lines[0].split(separator);\r\n\r\n  lines.map((line, indexLine) => {\r\n    if (indexLine < 1) return result; // Jump header line\r\n\r\n    const obj = {};\r\n    const currentline = line.split(separator);\r\n\r\n    headers.map((header, indexHeader) => {\r\n      obj[header] = currentline[indexHeader];\r\n      return obj;\r\n    });\r\n\r\n    result.push(obj);\r\n    return result;\r\n  });\r\n\r\n  result.pop(); // remove the last item because undefined values\r\n\r\n  result = convertDatatypes(result);\r\n\r\n  console.log(result);\r\n  return result;\r\n}\r\n\r\n/**\r\n * Clean CSV Data\r\n * @param {String} csv\r\n * @return {String}\r\n */\r\nfunction cleanData(csv) {\r\n  let cleanedCsv;\r\n  cleanedCsv = changeHeaders(csv);\r\n  // change all commas in titles to ###\r\n  cleanedCsv = cleanedCsv.replace(/\"[^\"]+\"/g, v => {\r\n    return v.replace(/,/g, '###');\r\n  });\r\n\r\n  // change all comma seperators to own separator\r\n  cleanedCsv = cleanedCsv.replace(/,/g, separator);\r\n\r\n  // change back to commas in title\r\n  cleanedCsv = cleanedCsv.replace(/###/g, ',');\r\n\r\n  // remove quotes in titles\r\n  cleanedCsv = cleanedCsv.replace(/\"/g, '');\r\n\r\n  return cleanedCsv;\r\n}\r\n\r\n/**\r\n * Change Headers of CSV\r\n * @param {String} csv\r\n * @return {String}\r\n */\r\nfunction changeHeaders(csv) {\r\n  let cleanedCsv;\r\n  cleanedCsv = csv.replace('Const,', 'id,');\r\n  cleanedCsv = cleanedCsv.replace('Your Rating,', 'rating,');\r\n  cleanedCsv = cleanedCsv.replace('Title,', 'title,');\r\n  cleanedCsv = cleanedCsv.replace('Date Rated,', 'dateRatedString,');\r\n  cleanedCsv = cleanedCsv.replace('Genres,', 'genres,');\r\n  cleanedCsv = cleanedCsv.replace('Title Type,', 'mediaType,');\r\n  cleanedCsv = cleanedCsv.replace('Directors,', 'directors,');\r\n  cleanedCsv = cleanedCsv.replace('Num Votes,', 'votes,');\r\n  cleanedCsv = cleanedCsv.replace('Runtime (mins),', 'runtime,');\r\n  cleanedCsv = cleanedCsv.replace('Release Date,', 'releaseDate,');\r\n  cleanedCsv = cleanedCsv.replace('URL,', 'url,');\r\n  cleanedCsv = cleanedCsv.replace('Year,', 'year,');\r\n  cleanedCsv = cleanedCsv.replace('Directors,', 'directors,');\r\n  cleanedCsv = cleanedCsv.replace('IMDb Rating,', 'imdbRating,');\r\n  return cleanedCsv;\r\n}\r\n\r\n/**\r\n * Covert Strings to corresponding datatypes\r\n * @param {Array} data\r\n * @return {Array}\r\n */\r\nfunction convertDatatypes(data) {\r\n  data.map(review => {\r\n    const mediaTypeId = mediaTypes.findIndex(\r\n      mediaType => mediaType.exportName === review.mediaType\r\n    );\r\n\r\n    review.rating = parseInt(review.rating);\r\n    review.runtime = parseInt(review.runtime);\r\n    review.votes = parseInt(review.votes);\r\n    review.year = parseInt(review.year);\r\n    review.imdbRating = parseFloat(review.imdbRating);\r\n    review.dateRated = new Date(review.dateRatedString);\r\n    review.mediaTypeId = mediaTypeId;\r\n    review.mediaType = mediaTypes[mediaTypeId].name;\r\n    return review;\r\n  });\r\n\r\n  return data;\r\n}\r\n\r\nexport { uploadFile };\r\n","/**\r\n * Check which mediaTypes are present in Uplaoad\r\n * @param {Array} ratings\r\n * @return {Array}\r\n */\r\nfunction getUniqueMediaTypes(ratings) {\r\n  let unique = [...new Set(ratings.map(rating => rating.mediaTypeId))];\r\n  unique = unique.sort();\r\n  return unique;\r\n}\r\n\r\nexport default getUniqueMediaTypes;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { uploadFile } from '../util/fileUpload';\r\nimport getUniqueMediaTypes from '../util/getUniqueMediaTypes';\r\nimport './Uploader.scss';\r\n\r\nconst Uploader = ({ setLoaded, setRatings, setLoadedMediaTypes }) => {\r\n  const upload = async () => {\r\n    const file = document.getElementById('fileUpload').files[0];\r\n    const json = await uploadFile(file);\r\n    const mediaTypes = getUniqueMediaTypes(json);\r\n    console.log(mediaTypes);\r\n    setRatings(json);\r\n    setLoadedMediaTypes(mediaTypes);\r\n    setLoaded(true);\r\n    sessionStorage.setItem('ratings', JSON.stringify(json));\r\n    sessionStorage.setItem('mediaTypes', mediaTypes);\r\n  };\r\n\r\n  return (\r\n    <div className=\"uploader\">\r\n      <h1>Upload IMDb Ratings CSV</h1>\r\n      <input type=\"file\" id=\"fileUpload\" onChange={upload} />\r\n    </div>\r\n  );\r\n};\r\n\r\nUploader.propTypes = {\r\n  setLoaded: PropTypes.func,\r\n  setRatings: PropTypes.func,\r\n  setLoadedMediaTypes: PropTypes.func,\r\n};\r\n\r\nexport default Uploader;\r\n","import React from 'react';\r\nimport './TitleBar.scss';\r\n\r\nconst TitleBar = () => {\r\n  return (\r\n    <div className=\"title-bar\">\r\n      <span className=\"app-name\">IMDb Ratings Visualizer</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TitleBar;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ReactTable from 'react-table';\r\nimport './RatingsTable.scss';\r\n\r\nconst RatingsTable = ({ ratings }) => {\r\n  const columns = [\r\n    {\r\n      Header: 'ID',\r\n      accessor: 'id',\r\n    },\r\n    {\r\n      Header: 'Title',\r\n      accessor: 'title',\r\n    },\r\n    {\r\n      Header: 'Rating',\r\n      accessor: 'rating',\r\n    },\r\n    {\r\n      Header: 'Type',\r\n      accessor: 'mediaType',\r\n    },\r\n    {\r\n      Header: 'Date Rated',\r\n      accessor: 'dateRatedString',\r\n    },\r\n    {\r\n      Header: 'Genres',\r\n      accessor: 'genres',\r\n    },\r\n  ];\r\n\r\n  const defaultSorted = [\r\n    {\r\n      id: 'rating',\r\n      desc: true,\r\n    },\r\n  ];\r\n\r\n  const nextText = (\r\n    <span>\r\n      <span style={{ verticalAlign: 'middle' }}>Next</span>\r\n      <i className=\"material-icons pagination-icon\">keyboard_arrow_right</i>\r\n    </span>\r\n  );\r\n\r\n  const previousText = (\r\n    <span>\r\n      <i className=\"material-icons pagination-icon left-pagination-icon\">\r\n        keyboard_arrow_left\r\n      </i>\r\n      <span>Previous</span>\r\n    </span>\r\n  );\r\n\r\n  return (\r\n    <ReactTable\r\n      data={ratings}\r\n      // resolveData={data => data.map(row => row)}\r\n      columns={columns}\r\n      className=\"-striped -highlight main-component\"\r\n      defaultSorted={defaultSorted}\r\n      defaultPageSize={50}\r\n      pageSizeOptions={[5, 10, 20, 25, 50, 100, 250, 1000]}\r\n      nextText={nextText}\r\n      previousText={previousText}\r\n      minRows={0}\r\n    />\r\n  );\r\n};\r\n\r\nRatingsTable.propTypes = {\r\n  ratings: PropTypes.array,\r\n};\r\n\r\nexport default RatingsTable;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ReactApexCharts from 'react-apexcharts';\r\n\r\nconst colors = [\r\n  '#FF355E',\r\n  '#FD5B78',\r\n  '#FF6037',\r\n  '#FF9933',\r\n  '#FFCC33',\r\n  '#FFFF66',\r\n  '#CCFF00',\r\n  '#66FF66',\r\n  '#50BFE6',\r\n  '#FF00CC',\r\n];\r\n\r\nconst AverageRatings = ({ ratingsData, ratingsCount }) => {\r\n  const options = {\r\n    colors,\r\n    plotOptions: {\r\n      bar: {\r\n        dataLabels: {\r\n          position: 'top',\r\n        },\r\n        distributed: true,\r\n        colors: {\r\n          backgroundBarOpacity: 1,\r\n        },\r\n      },\r\n    },\r\n    dataLabels: {\r\n      enabled: true,\r\n      formatter: val => {\r\n        return Math.round((val / ratingsCount) * 100) + '%';\r\n      },\r\n      // offsetY: -20,\r\n      style: {\r\n        fontSize: '12px',\r\n        colors: ['#ffffff'],\r\n      },\r\n    },\r\n    xaxis: {\r\n      categories: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'],\r\n      labels: {\r\n        style: {\r\n          colors,\r\n        },\r\n      },\r\n    },\r\n    // fill: {\r\n    //   type: 'solid',\r\n    //   colors,\r\n    //   gradient: {\r\n    //     shade: 'light',\r\n    //     type: 'horizontal',\r\n    //     shadeIntensity: 0.25,\r\n    //     gradientToColors: undefined,\r\n    //     inverseColors: true,\r\n    //     opacityFrom: 1,\r\n    //     opacityTo: 1,\r\n    //     stops: [50, 0, 100, 100],\r\n    //   },\r\n    // },\r\n    title: {\r\n      text: 'Ratings per Stars',\r\n      floating: true,\r\n      align: 'center',\r\n      style: {\r\n        color: '#ffffff',\r\n      },\r\n    },\r\n    tooltip: {\r\n      x: {\r\n        show: false,\r\n      },\r\n    },\r\n    grid: {\r\n      show: false,\r\n    },\r\n    chart: {\r\n      toolbar: {\r\n        tools: {\r\n          download: false,\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  const series = [\r\n    {\r\n      name: 'Ratings',\r\n      data: ratingsData,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"chart-container\">\r\n      <ReactApexCharts\r\n        options={options}\r\n        series={series}\r\n        type=\"bar\"\r\n        height=\"350\"\r\n        width=\"600\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nAverageRatings.propTypes = {\r\n  ratingsData: PropTypes.array,\r\n  ratingsCount: PropTypes.number,\r\n};\r\n\r\nexport default AverageRatings;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Ratings.scss';\r\n\r\nconst Ratings = ({ ratings, ratingsCount }) => {\r\n  const ratingsSum = ratings.reduce((a, b) => a + (b.rating || 0), 0);\r\n  const average = (ratingsSum / ratingsCount).toFixed(1);\r\n\r\n  return (\r\n    <div className=\"chart-container\">\r\n      <div>\r\n        <div className=\"key-description\">Total Ratings</div>\r\n        <div className=\"key-number\">{ratingsCount}</div>\r\n      </div>\r\n      <div>\r\n        <div className=\"key-description\">Average Rating</div>\r\n        <div className=\"key-number\">{average}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nRatings.propTypes = {\r\n  ratings: PropTypes.array,\r\n  ratingsCount: PropTypes.number,\r\n};\r\n\r\nexport default Ratings;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AverageRatings from './charts/AverageRatings';\r\nimport Ratings from './charts/Ratings';\r\nimport './Dashboard.scss';\r\n\r\nconst countOccurences = ratings => {\r\n  const ratingsArray = ratings.map(rating => rating.rating);\r\n  const counts = {\r\n    1: 0,\r\n    2: 0,\r\n    3: 0,\r\n    4: 0,\r\n    5: 0,\r\n    6: 0,\r\n    7: 0,\r\n    8: 0,\r\n    9: 0,\r\n    10: 0,\r\n  };\r\n\r\n  for (let i = 0; i < ratingsArray.length; i++) {\r\n    const num = ratingsArray[i];\r\n    counts[num] = counts[num] ? counts[num] + 1 : 1;\r\n  }\r\n\r\n  console.log(counts);\r\n\r\n  const arr = [];\r\n  for (let i = 1; i <= 10; i++) {\r\n    arr.push(counts[i]);\r\n  }\r\n\r\n  console.log(arr);\r\n  return arr;\r\n};\r\n\r\nconst Dashboard = ({ ratings }) => {\r\n  const ratingsCount = ratings.length;\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"main-component\" style={{ height: '384px' }}>\r\n        <Ratings ratings={ratings} ratingsCount={ratingsCount} />\r\n        <AverageRatings\r\n          ratingsData={countOccurences(ratings)}\r\n          ratingsCount={ratingsCount}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nDashboard.propTypes = {\r\n  ratings: PropTypes.array,\r\n};\r\n\r\nexport default Dashboard;\r\n","import RatingsTable from '../components/RatingsTable';\r\nimport Dashboard from '../components/Dashboard';\r\n\r\nconst routes = [\r\n  {\r\n    name: 'Dashboard',\r\n    icon: 'bubble_chart',\r\n    path: '/',\r\n    component: Dashboard,\r\n  },\r\n  {\r\n    name: 'Ratings',\r\n    icon: 'list',\r\n    path: '/ratings',\r\n    component: RatingsTable,\r\n  },\r\n];\r\n\r\nexport default routes;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Sidebar.scss';\r\nimport { Link } from 'react-router-dom';\r\nimport routes from '../util/routes';\r\nimport mediaTypes from '../constants/mediaTypes';\r\n\r\n/**\r\n * returns active route name\r\n * @param {Array} routes\r\n * @return {String}\r\n */\r\nconst getActiveRoute = routes => {\r\n  console.log(routes);\r\n\r\n  const currentRoute = routes.find(route => {\r\n    const lastPath = window.location.pathname.substr(\r\n      window.location.pathname.lastIndexOf('/')\r\n    );\r\n\r\n    return route.path === lastPath;\r\n  });\r\n\r\n  return currentRoute.name;\r\n};\r\n\r\nconst Sidebar = ({ loadedMediaTypes, filterMovies }) => {\r\n  const precheckBoxes = loadedMediaTypes.map(typeId => {\r\n    return [typeId, true];\r\n  });\r\n  const [forceUpdate, setForceUpdate] = useState(1);\r\n  const [checkedItems, setCheckedItems] = useState(new Map(precheckBoxes));\r\n\r\n  const handleCheckboxChange = event => {\r\n    const id = parseInt(event.target.value);\r\n    const isChecked = event.target.checked;\r\n    setCheckedItems(checkedItems.set(id, isChecked));\r\n    setForceUpdate(forceUpdate + 1);\r\n    filterMovies(checkedItems);\r\n  };\r\n\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <SidebarElements />\r\n      <div>\r\n        <h3 className=\"filter-heading\">Filter</h3>\r\n        {checkedItems\r\n          ? loadedMediaTypes.map(typeId => {\r\n              return (\r\n                <Checkbox\r\n                  key={typeId}\r\n                  id={typeId}\r\n                  name={mediaTypes[typeId].name}\r\n                  checked={checkedItems.get(typeId)}\r\n                  onChange={handleCheckboxChange}\r\n                />\r\n              );\r\n            })\r\n          : 'loading'}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nSidebar.propTypes = {\r\n  loadedMediaTypes: PropTypes.array,\r\n  filterMovies: PropTypes.func,\r\n};\r\n\r\nconst SidebarElements = () => {\r\n  const [active, setActive] = useState(getActiveRoute(routes));\r\n\r\n  const isActive = name => {\r\n    return active === name;\r\n  };\r\n\r\n  return routes ? (\r\n    <div>\r\n      {routes.map(route => {\r\n        return (\r\n          <div key={route.name}>\r\n            <Link\r\n              to={`${process.env.PUBLIC_URL}${route.path}`}\r\n              className=\"sidebar-link\"\r\n            >\r\n              <div className={isActive(route.name) ? 'active-tab' : ''}>\r\n                <div\r\n                  onClick={() => setActive(route.name)}\r\n                  className=\"sidebar-box\"\r\n                >\r\n                  <i className=\"material-icons sidebar-icon\">{route.icon}</i>\r\n                  <span className=\"sidebar-text\">{route.name}</span>\r\n                </div>\r\n              </div>\r\n            </Link>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  ) : (\r\n    'Loading'\r\n  );\r\n};\r\n\r\nconst Checkbox = ({ id, name, checked, onChange }) => {\r\n  return (\r\n    <label className=\"filter-checkbox-label\">\r\n      <input\r\n        type=\"checkbox\"\r\n        className=\"custom-checkbox\"\r\n        value={id}\r\n        name={name}\r\n        checked={checked}\r\n        onChange={onChange}\r\n      />\r\n      {name}\r\n    </label>\r\n  );\r\n};\r\n\r\nCheckbox.propTypes = {\r\n  id: PropTypes.number,\r\n  name: PropTypes.string,\r\n  checked: PropTypes.bool,\r\n  onChange: PropTypes.func,\r\n};\r\n\r\nexport default Sidebar;\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './App.scss';\r\nimport Uploader from './components/Uploader';\r\nimport TitleBar from './components/TitleBar';\r\nimport Sidebar from './components/Sidebar';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport routes from './util/routes';\r\n\r\nconst App = () => {\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [ratings, setRatings] = useState();\r\n  const [loadedMediaTypes, setLoadedMediaTypes] = useState();\r\n\r\n  useEffect(() => {\r\n    if (!loaded) {\r\n      const sessionRatings = sessionStorage.getItem('ratings');\r\n\r\n      // load data from session storage\r\n      if (sessionRatings) {\r\n        console.log(JSON.parse(sessionRatings));\r\n        setRatings(JSON.parse(sessionRatings));\r\n        setLoadedMediaTypes(\r\n          sessionStorage\r\n            .getItem('mediaTypes')\r\n            .split(',')\r\n            .map(item => parseInt(item))\r\n        );\r\n        setLoaded(true);\r\n      }\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <TitleBar />\r\n      <div className=\"main-content\">\r\n        {loaded ? (\r\n          <Router>\r\n            <LoadedApp ratings={ratings} loadedMediaTypes={loadedMediaTypes} />\r\n          </Router>\r\n        ) : (\r\n          <Uploader\r\n            setLoaded={setLoaded}\r\n            setRatings={setRatings}\r\n            setLoadedMediaTypes={setLoadedMediaTypes}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst LoadedApp = ({ ratings, loadedMediaTypes }) => {\r\n  const [filteredRatings, setFilteredRatings] = useState(ratings);\r\n\r\n  const filterMovies = filterMap => {\r\n    const filtered = ratings.filter(\r\n      rating => filterMap.get(rating.mediaTypeId) === true\r\n    );\r\n\r\n    setFilteredRatings(filtered);\r\n  };\r\n\r\n  const routeComponents = routes.map(({ path, component: Component, name }) => {\r\n    return (\r\n      <Route\r\n        exact\r\n        path={`${process.env.PUBLIC_URL}${path}`}\r\n        render={() => <Component ratings={filteredRatings} />}\r\n        key={name}\r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <Sidebar\r\n        loadedMediaTypes={loadedMediaTypes}\r\n        filterMovies={filterMovies}\r\n      />\r\n      {routeComponents}\r\n      {/* <RatingsTable ratings={ratings} /> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nLoadedApp.propTypes = {\r\n  ratings: PropTypes.array,\r\n  loadedMediaTypes: PropTypes.array,\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\n/**\n * Registers a Service Worker\n * @param {Object} config\n */\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\n/**\n * Register a Valid Service Worker\n * @param {String} swUrl\n * @param {Object} config\n */\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\n/**\n * Check a valid Service Worker\n * @param {String} swUrl\n * @param {Object} config\n */\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\n/**\n * Unregister Service worker\n */\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}