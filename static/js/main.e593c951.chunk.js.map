{"version":3,"sources":["components/RatingsTable.js","util/fileUpload.js","components/Uploader.js","App.js","serviceWorker.js","index.js"],"names":["RatingsTable","_ref","ratings","react_default","a","createElement","es","data","columns","Header","accessor","className","separator","uploadFile","_callee","file","csv","regenerator_default","wrap","_context","prev","next","readFile","sent","abrupt","csvToJson","stop","Promise","resolve","reject","fileReader","FileReader","onloadend","event","content","target","result","onerror","err","readAsText","rawCsv","lines","replace","changeHeaders","v","cleanData","split","console","log","headers","map","line","indexLine","obj","currentline","header","indexHeader","push","pop","Uploader","setLoaded","setRatings","upload","_ref2","Object","asyncToGenerator","mark","json","document","getElementById","files","apply","this","arguments","type","id","onChange","App","_React$useState","React","useState","_React$useState2","slicedToArray","loaded","_React$useState3","_React$useState4","components_RatingsTable","components_Uploader","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e593c951.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ReactTable from 'react-table';\r\nimport 'react-table/react-table.css';\r\n\r\nconst RatingsTable = ({ ratings }) => {\r\n  const columns = [\r\n    {\r\n      Header: 'ID',\r\n      accessor: 'id',\r\n    },\r\n    {\r\n      Header: 'Title',\r\n      accessor: 'title',\r\n    },\r\n    {\r\n      Header: 'Rating',\r\n      accessor: 'rating',\r\n    },\r\n    {\r\n      Header: 'Type',\r\n      accessor: 'titleType',\r\n    },\r\n    {\r\n      Header: 'Date Rated',\r\n      accessor: 'dateRated',\r\n    },\r\n    {\r\n      Header: 'Genres',\r\n      accessor: 'genres',\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <ReactTable\r\n      data={ratings}\r\n      // resolveData={data => data.map(row => row)}\r\n      columns={columns}\r\n      className=\"-striped -highlight\"\r\n    />\r\n  );\r\n};\r\n\r\nRatingsTable.propTypes = {\r\n  ratings: PropTypes.array,\r\n};\r\n\r\nexport default RatingsTable;\r\n","const separator = '***';\r\n\r\n/**\r\n * Upload Process for File\r\n * @param {Blob} file\r\n * @return {JSON}\r\n */\r\nasync function uploadFile(file) {\r\n  const csv = await readFile(file);\r\n  return csvToJson(csv);\r\n  // sessionStorage.setItem('ratings', JSON.stringify(json));\r\n  // setLoaded(true);\r\n}\r\n\r\n/**\r\n * Read Contents of a File\r\n * @param {Blob} file\r\n * @return {String}\r\n */\r\nfunction readFile(file) {\r\n  return new Promise((resolve, reject) => {\r\n    const fileReader = new FileReader();\r\n    fileReader.onloadend = event => {\r\n      const content = event.target.result;\r\n      resolve(content);\r\n    };\r\n\r\n    fileReader.onerror = err => {\r\n      reject(err);\r\n    };\r\n    fileReader.readAsText(file, 'Windows-1252');\r\n  });\r\n}\r\n\r\n/**\r\n * Translate CSV to JSON\r\n * @param {String} rawCsv\r\n * @return {JSON}\r\n */\r\nfunction csvToJson(rawCsv) {\r\n  const csv = cleanData(rawCsv);\r\n\r\n  const lines = csv.split('\\n');\r\n  console.log(lines[0]);\r\n  const result = [];\r\n  const headers = lines[0].split(separator);\r\n\r\n  lines.map((line, indexLine) => {\r\n    if (indexLine < 1) return result; // Jump header line\r\n\r\n    const obj = {};\r\n    const currentline = line.split(separator);\r\n\r\n    headers.map((header, indexHeader) => {\r\n      obj[header] = currentline[indexHeader];\r\n      return obj;\r\n    });\r\n\r\n    result.push(obj);\r\n    return result;\r\n  });\r\n\r\n  result.pop(); // remove the last item because undefined values\r\n\r\n  console.log(result);\r\n  return result;\r\n}\r\n\r\n/**\r\n * Clean CSV Data\r\n * @param {String} csv\r\n * @return {String}\r\n */\r\nfunction cleanData(csv) {\r\n  let cleanedCsv;\r\n  cleanedCsv = changeHeaders(csv);\r\n  // change all commas in titles to ###\r\n  cleanedCsv = cleanedCsv.replace(/\"[^\"]+\"/g, v => {\r\n    return v.replace(/,/g, '###');\r\n  });\r\n\r\n  // change all comma seperators to own separator\r\n  cleanedCsv = cleanedCsv.replace(/,/g, separator);\r\n\r\n  // change back to commas in title\r\n  cleanedCsv = cleanedCsv.replace(/###/g, ',');\r\n\r\n  // remove quotes in titles\r\n  cleanedCsv = cleanedCsv.replace(/\"/g, '');\r\n\r\n  return cleanedCsv;\r\n}\r\n\r\n/**\r\n * Change Headers of CSV\r\n * @param {String} csv\r\n * @return {String}\r\n */\r\nfunction changeHeaders(csv) {\r\n  let cleanedCsv;\r\n  cleanedCsv = csv.replace('Const,', 'id,');\r\n  cleanedCsv = cleanedCsv.replace('Your Rating,', 'rating,');\r\n  cleanedCsv = cleanedCsv.replace('Title,', 'title,');\r\n  cleanedCsv = cleanedCsv.replace('Date Rated,', 'dateRated,');\r\n  cleanedCsv = cleanedCsv.replace('Genres,', 'genres,');\r\n  cleanedCsv = cleanedCsv.replace('Title Type,', 'titleType,');\r\n  cleanedCsv = cleanedCsv.replace('Directors,', 'directors,');\r\n  cleanedCsv = cleanedCsv.replace('Num Votes,', 'votes,');\r\n  cleanedCsv = cleanedCsv.replace('Runtime (mins),', 'runtime,');\r\n  cleanedCsv = cleanedCsv.replace('Release Date,', 'releaseDate,');\r\n  cleanedCsv = cleanedCsv.replace('URL,', 'url,');\r\n  cleanedCsv = cleanedCsv.replace('Year,', 'year,');\r\n  cleanedCsv = cleanedCsv.replace('Directors,', 'directors,');\r\n  cleanedCsv = cleanedCsv.replace('IMDB Rating,', 'imdbRating,');\r\n  return cleanedCsv;\r\n}\r\n\r\nexport { uploadFile };\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { uploadFile } from '../util/fileUpload';\r\n\r\nconst Uploader = ({ setLoaded, setRatings }) => {\r\n  const upload = async () => {\r\n    const file = document.getElementById('fileUpload').files[0];\r\n    const json = await uploadFile(file);\r\n    setRatings(json);\r\n    setLoaded(true);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Upload IMDb Ratings CSV</h1>\r\n      <input type=\"file\" id=\"fileUpload\" onChange={upload} />\r\n    </div>\r\n  );\r\n};\r\n\r\nUploader.propTypes = {\r\n  setLoaded: PropTypes.func,\r\n  setRatings: PropTypes.func,\r\n};\r\n\r\nexport default Uploader;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport RatingsTable from './components/RatingsTable';\r\nimport Uploader from './components/Uploader';\r\n\r\nconst App = () => {\r\n  const [loaded, setLoaded] = React.useState(false);\r\n  const [ratings, setRatings] = React.useState();\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {loaded ? (\r\n        <RatingsTable ratings={ratings} />\r\n      ) : (\r\n        <Uploader setLoaded={setLoaded} setRatings={setRatings} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\n/**\r\n * Registers a Service Worker\r\n * @param {Object} config\r\n */\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Register a Valid Service Worker\r\n * @param {String} swUrl\r\n * @param {Object} config\r\n */\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\n/**\r\n * Check a valid Service Worker\r\n * @param {String} swUrl\r\n * @param {Object} config\r\n */\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\n/**\r\n * Unregister Service worker\r\n */\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}