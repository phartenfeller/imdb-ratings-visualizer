{"version":3,"sources":["App.scss","components/TitleBar.scss","components/Sidebar.scss","components/Table.scss","components/charts/MainInfos.scss","components/Dashboard.scss","constants/mediaTypes.js","util/fileUpload.js","util/getUniqueMediaTypes.js","components/Uploader.js","components/TitleBar.js","components/Table.js","components/RatingsTable.js","components/charts/BarChart.js","components/charts/AverageRatings.js","components/charts/MainInfos.js","components/Dashboard.js","components/charts/RatingsPerWeekday.js","components/charts/RatingsPerYear.js","components/charts/LineColumn.js","components/charts/RatingsPerDecade.js","components/Deviations.js","util/routes.js","components/Time.js","components/Sidebar.js","util/recoverData.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","colorBlack","creamYellow","mediaTypes","name","exportName","separator","uploadFile","_callee","file","csv","regenerator_default","a","wrap","_context","prev","next","readFile","sent","abrupt","csvToJson","stop","Promise","resolve","reject","fileReader","FileReader","onloadend","event","content","target","result","onerror","err","readAsText","rawCsv","lines","replace","changeHeaders","v","cleanData","split","console","log","data","headers","map","line","indexLine","obj","currentline","header","indexHeader","push","pop","review","mediaTypeId","findIndex","mediaType","rating","parseInt","runtime","votes","year","imdbRating","parseFloat","dateRated","Date","dateRatedString","genres","directors","deviation","toFixed","getUniqueMediaTypes","ratings","unique","Object","toConsumableArray","Set","sort","Uploader","_ref","setLoaded","setRatings","setLoadedMediaTypes","upload","_ref2","asyncToGenerator","mark","json","document","getElementById","files","sessionStorage","setItem","JSON","stringify","apply","this","arguments","react_default","createElement","className","type","id","onChange","TitleBar","nextText","style","verticalAlign","previousText","Table","columns","defaultSorted","defaultPageSize","es","pageSizeOptions","minRows","RatingsTable","src_components_Table","Header","accessor","desc","BarChart","title","categories","dataCount","seriesName","height","width","options","colors","plotOptions","bar","dataLabels","position","distributed","backgroundBarOpacity","offsetY","enabled","formatter","val","Math","round","fontSize","undefined","xaxis","labels","fill","gradient","shade","shadeIntensity","inverseColors","opacityFrom","opacityTo","stops","text","floating","align","color","tooltip","theme","x","show","grid","chart","toolbar","tools","download","series","react_apexcharts_min_default","AverageRatings","ratingsData","ratingsCount","charts_BarChart","KeyValue","description","value","MainInfos","_getAnalyzedData","ratingsSum","reduce","b","average","pubRatingsSum","pubAverage","minutesSum","getAnalyzedData","_getAnalyzedData2","slicedToArray","daysWatched","MainInfos_KeyValue","countOccurences","ratingsArray","counts","Array","i","length","num","weekdays","RatingsPerWeekday","ratingsPerWeekday","weekdayRatings","prevValue","currentValue","getDay","shift","countRatings","RatingsPerYear","ratedYears","getFullYear","uniqueYears","yearsData","years","index","indexOf","LineColumn","columnName","columnData","lineName","lineData","stroke","yaxis","decimalsInFloat","opposite","yearToDecade","floor","RatingsPerDecade","decades","now","arr","getDecades","_analysePerDecades","amountDecades","avgRating","decade","analysePerDecades","_analysePerDecades2","charts_LineColumn","routes","icon","path","component","components_charts_MainInfos","charts_AverageRatings","charts_RatingsPerWeekday","charts_RatingsPerYear","charts_RatingsPerDecade","_splitAndSort","positives","filter","negatives","splitAndSort","_splitAndSort2","float","SidebarElements","_useState5","useState","find","route","lastPath","window","location","pathname","substr","lastIndexOf","_useState6","active","setActive","key","react_router_dom","to","concat","process","onClick","Checkbox","checked","Sidebar","loadedMediaTypes","filterMovies","precheckBoxes","typeId","_useState","_useState2","forceUpdate","setForceUpdate","_useState3","Map","_useState4","checkedItems","setCheckedItems","handleCheckboxChange","isChecked","set","Sidebar_SidebarElements","Sidebar_Checkbox","get","sessionRatings","ratingsJSON","getItem","parse","recoverDates","item","_callee2","_context2","recoverData","LoadedApp","_useState7","_useState8","filteredRatings","setFilteredRatings","routeComponents","Component","react_router","exact","render","src_components_Sidebar","filterMap","filtered","App","loaded","useEffect","src_components_TitleBar","App_LoadedApp","src_components_Uploader","Boolean","hostname","match","ReactDOM","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.228bb917.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"colorBlack\":\"black\",\"creamYellow\":\"#ffee70\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"colorBlack\":\"black\",\"creamYellow\":\"#ffee70\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"colorBlack\":\"black\",\"creamYellow\":\"#ffee70\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"colorBlack\":\"black\",\"creamYellow\":\"#ffee70\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"colorBlack\":\"black\",\"creamYellow\":\"#ffee70\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"colorBlack\":\"black\",\"creamYellow\":\"#ffee70\"};","const mediaTypes = [\r\n  {\r\n    name: 'Movie',\r\n    exportName: 'movie',\r\n  },\r\n  {\r\n    name: 'TV Movie',\r\n    exportName: 'tvMovie',\r\n  },\r\n  {\r\n    name: 'Series',\r\n    exportName: 'tvSeries',\r\n  },\r\n  {\r\n    name: 'Mini Series',\r\n    exportName: 'tvMiniSeries',\r\n  },\r\n  {\r\n    name: 'Episode',\r\n    exportName: 'tvEpisode',\r\n  },\r\n  {\r\n    name: 'Video',\r\n    exportName: 'video',\r\n  },\r\n  {\r\n    name: 'Short',\r\n    exportName: 'short',\r\n  },\r\n  {\r\n    name: 'TV Short',\r\n    exportName: 'tvShort',\r\n  },\r\n  {\r\n    name: 'TV Special',\r\n    exportName: 'tvSpecial',\r\n  },\r\n  {\r\n    name: 'Video Game',\r\n    exportName: 'videoGame',\r\n  },\r\n];\r\n\r\nexport default mediaTypes;\r\n","import mediaTypes from '../constants/mediaTypes';\r\n\r\nconst separator = '***';\r\n\r\n/**\r\n * Upload Process for File\r\n * @param {Blob} file\r\n * @return {JSON}\r\n */\r\nasync function uploadFile(file) {\r\n  const csv = await readFile(file);\r\n  return csvToJson(csv);\r\n}\r\n\r\n/**\r\n * Read Contents of a File\r\n * @param {Blob} file\r\n * @return {String}\r\n */\r\nfunction readFile(file) {\r\n  return new Promise((resolve, reject) => {\r\n    const fileReader = new FileReader();\r\n    fileReader.onloadend = event => {\r\n      const content = event.target.result;\r\n      resolve(content);\r\n    };\r\n\r\n    fileReader.onerror = err => {\r\n      reject(err);\r\n    };\r\n    fileReader.readAsText(file, 'Windows-1252');\r\n  });\r\n}\r\n\r\n/**\r\n * Translate CSV to JSON\r\n * @param {String} rawCsv\r\n * @return {JSON}\r\n */\r\nfunction csvToJson(rawCsv) {\r\n  const csv = cleanData(rawCsv);\r\n\r\n  const lines = csv.split('\\n');\r\n  console.log(lines[0]);\r\n  let result = [];\r\n  const headers = lines[0].split(separator);\r\n\r\n  lines.map((line, indexLine) => {\r\n    if (indexLine < 1) return result; // Jump header line\r\n\r\n    const obj = {};\r\n    const currentline = line.split(separator);\r\n\r\n    headers.map((header, indexHeader) => {\r\n      obj[header] = currentline[indexHeader];\r\n      return obj;\r\n    });\r\n\r\n    result.push(obj);\r\n    return result;\r\n  });\r\n\r\n  result.pop(); // remove the last item because undefined values\r\n\r\n  result = convertDatatypes(result);\r\n\r\n  console.log(result);\r\n  return result;\r\n}\r\n\r\n/**\r\n * Clean CSV Data\r\n * @param {String} csv\r\n * @return {String}\r\n */\r\nfunction cleanData(csv) {\r\n  let cleanedCsv;\r\n  cleanedCsv = changeHeaders(csv);\r\n  // change all commas in titles to ###\r\n  cleanedCsv = cleanedCsv.replace(/\"[^\"]+\"/g, v => {\r\n    return v.replace(/,/g, '###');\r\n  });\r\n\r\n  // change all comma seperators to own separator\r\n  cleanedCsv = cleanedCsv.replace(/,/g, separator);\r\n\r\n  // change back to commas in title\r\n  cleanedCsv = cleanedCsv.replace(/###/g, ',');\r\n\r\n  // remove quotes in titles\r\n  cleanedCsv = cleanedCsv.replace(/\"/g, '');\r\n\r\n  return cleanedCsv;\r\n}\r\n\r\n/**\r\n * Change Headers of CSV\r\n * @param {String} csv\r\n * @return {String}\r\n */\r\nfunction changeHeaders(csv) {\r\n  let cleanedCsv;\r\n  cleanedCsv = csv.replace('Const,', 'id,');\r\n  cleanedCsv = cleanedCsv.replace('Your Rating,', 'rating,');\r\n  cleanedCsv = cleanedCsv.replace('Title,', 'title,');\r\n  cleanedCsv = cleanedCsv.replace('Date Rated,', 'dateRatedString,');\r\n  cleanedCsv = cleanedCsv.replace('Genres,', 'genres,');\r\n  cleanedCsv = cleanedCsv.replace('Title Type,', 'mediaType,');\r\n  cleanedCsv = cleanedCsv.replace('Num Votes,', 'votes,');\r\n  cleanedCsv = cleanedCsv.replace('Runtime (mins),', 'runtime,');\r\n  cleanedCsv = cleanedCsv.replace('Release Date,', 'releaseDate,');\r\n  cleanedCsv = cleanedCsv.replace('URL,', 'url,');\r\n  cleanedCsv = cleanedCsv.replace('Year,', 'year,');\r\n  cleanedCsv = cleanedCsv.replace('IMDb Rating,', 'imdbRating,');\r\n  cleanedCsv = cleanedCsv.replace(',Directors', ',directors');\r\n  return cleanedCsv;\r\n}\r\n\r\n/**\r\n * Covert Strings to corresponding datatypes\r\n * @param {Array} data\r\n * @return {Array}\r\n */\r\nfunction convertDatatypes(data) {\r\n  data.map(review => {\r\n    const mediaTypeId = mediaTypes.findIndex(\r\n      mediaType => mediaType.exportName === review.mediaType\r\n    );\r\n\r\n    review.rating = parseInt(review.rating);\r\n    review.runtime = parseInt(review.runtime);\r\n    review.votes = parseInt(review.votes);\r\n    review.year = parseInt(review.year);\r\n    review.imdbRating = parseFloat(review.imdbRating);\r\n    review.dateRated = new Date(review.dateRatedString);\r\n    review.mediaTypeId = mediaTypeId;\r\n    review.mediaType = mediaTypes[mediaTypeId].name;\r\n    review.genres = review.genres.split(', ');\r\n    review.directors = review.directors.split(', ');\r\n    review.deviation = parseFloat(\r\n      (review.rating - review.imdbRating).toFixed(1)\r\n    );\r\n    return review;\r\n  });\r\n\r\n  return data;\r\n}\r\n\r\nexport { uploadFile };\r\n","/**\r\n * Check which mediaTypes are present in Uplaoad\r\n * @param {Array} ratings\r\n * @return {Array}\r\n */\r\nfunction getUniqueMediaTypes(ratings) {\r\n  let unique = [...new Set(ratings.map(rating => rating.mediaTypeId))];\r\n  unique = unique.sort();\r\n  return unique;\r\n}\r\n\r\nexport default getUniqueMediaTypes;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { uploadFile } from '../util/fileUpload';\r\nimport getUniqueMediaTypes from '../util/getUniqueMediaTypes';\r\nimport './Uploader.scss';\r\n\r\nconst Uploader = ({ setLoaded, setRatings, setLoadedMediaTypes }) => {\r\n  const upload = async () => {\r\n    const file = document.getElementById('fileUpload').files[0];\r\n    const json = await uploadFile(file);\r\n    const mediaTypes = getUniqueMediaTypes(json);\r\n    console.log(mediaTypes);\r\n    setRatings(json);\r\n    setLoadedMediaTypes(mediaTypes);\r\n    setLoaded(true);\r\n    sessionStorage.setItem('ratings', JSON.stringify(json));\r\n    sessionStorage.setItem('mediaTypes', mediaTypes);\r\n  };\r\n\r\n  return (\r\n    <div className=\"uploader\">\r\n      <h1>Upload IMDb Ratings CSV</h1>\r\n      <input type=\"file\" id=\"fileUpload\" onChange={upload} />\r\n    </div>\r\n  );\r\n};\r\n\r\nUploader.propTypes = {\r\n  setLoaded: PropTypes.func,\r\n  setRatings: PropTypes.func,\r\n  setLoadedMediaTypes: PropTypes.func,\r\n};\r\n\r\nexport default Uploader;\r\n","import React from 'react';\r\nimport './TitleBar.scss';\r\n\r\nconst TitleBar = () => {\r\n  return (\r\n    <div className=\"title-bar\">\r\n      <span className=\"app-name\">IMDb Ratings Visualizer</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TitleBar;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ReactTable from 'react-table';\r\nimport './Table.scss';\r\n\r\nconst nextText = (\r\n  <span>\r\n    <span style={{ verticalAlign: 'middle' }}>Next</span>\r\n    <i className=\"material-icons pagination-icon\">keyboard_arrow_right</i>\r\n  </span>\r\n);\r\n\r\nconst previousText = (\r\n  <span>\r\n    <i className=\"material-icons pagination-icon left-pagination-icon\">\r\n      keyboard_arrow_left\r\n    </i>\r\n    <span>Previous</span>\r\n  </span>\r\n);\r\n\r\nconst Table = ({ data, columns, defaultSorted, defaultPageSize }) => {\r\n  return (\r\n    <ReactTable\r\n      data={data}\r\n      // resolveData={data => data.map(row => row)}\r\n      columns={columns}\r\n      className=\"-striped -highlight\"\r\n      defaultSorted={defaultSorted}\r\n      defaultPageSize={defaultPageSize}\r\n      pageSizeOptions={[5, 10, 15, 25, 50, 100, 250, 1000]}\r\n      nextText={nextText}\r\n      previousText={previousText}\r\n      minRows={0}\r\n    />\r\n  );\r\n};\r\n\r\nTable.propTypes = {\r\n  data: PropTypes.array,\r\n  columns: PropTypes.array,\r\n  defaultSorted: PropTypes.object,\r\n  defaultPageSize: PropTypes.number,\r\n};\r\n\r\nexport default Table;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Table from './Table';\r\nimport './RatingsTable.scss';\r\n\r\nconst RatingsTable = ({ ratings }) => {\r\n  const columns = [\r\n    {\r\n      Header: 'ID',\r\n      accessor: 'id',\r\n    },\r\n    {\r\n      Header: 'Title',\r\n      accessor: 'title',\r\n    },\r\n    {\r\n      Header: 'Rating',\r\n      accessor: 'rating',\r\n    },\r\n    {\r\n      Header: 'Type',\r\n      accessor: 'mediaType',\r\n    },\r\n    {\r\n      Header: 'Date Rated',\r\n      accessor: 'dateRatedString',\r\n    },\r\n    {\r\n      Header: 'Genres',\r\n      accessor: 'genres',\r\n    },\r\n  ];\r\n\r\n  const defaultSorted = [\r\n    {\r\n      id: 'rating',\r\n      desc: true,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"main-component\">\r\n      <Table\r\n        data={ratings}\r\n        columns={columns}\r\n        defaultSorted={defaultSorted}\r\n        defaultPageSize={50}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nRatingsTable.propTypes = {\r\n  ratings: PropTypes.array,\r\n};\r\n\r\nexport default RatingsTable;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ReactApexCharts from 'react-apexcharts';\r\n\r\nconst BarChart = ({\r\n  title,\r\n  categories,\r\n  data,\r\n  dataCount,\r\n  seriesName,\r\n  height,\r\n  width,\r\n}) => {\r\n  const options = {\r\n    colors: ['#FFEE70'],\r\n    plotOptions: {\r\n      bar: {\r\n        dataLabels: {\r\n          position: 'top',\r\n        },\r\n        distributed: true,\r\n        colors: {\r\n          backgroundBarOpacity: 1,\r\n        },\r\n      },\r\n    },\r\n    dataLabels: {\r\n      offsetY: -22,\r\n      enabled: true,\r\n      formatter: val => {\r\n        return Math.round((val / dataCount) * 100) + '%';\r\n      },\r\n      style: {\r\n        fontSize: '12px',\r\n        colors: undefined,\r\n      },\r\n    },\r\n    xaxis: {\r\n      categories,\r\n      labels: {},\r\n    },\r\n    fill: {\r\n      type: 'gradient',\r\n      gradient: {\r\n        shade: 'light',\r\n        type: 'vertical',\r\n        shadeIntensity: 0.4,\r\n        inverseColors: false,\r\n        opacityFrom: 1,\r\n        opacityTo: 1,\r\n        stops: [50, 100],\r\n      },\r\n    },\r\n    title: {\r\n      text: title,\r\n      floating: true,\r\n      align: 'center',\r\n      style: {\r\n        color: '#ffffff',\r\n      },\r\n    },\r\n    tooltip: {\r\n      theme: 'dark',\r\n      x: {\r\n        show: false,\r\n      },\r\n    },\r\n    grid: {\r\n      show: false,\r\n    },\r\n    chart: {\r\n      toolbar: {\r\n        tools: {\r\n          download: false,\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  const series = [\r\n    {\r\n      name: seriesName,\r\n      data: data,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"chart-container\">\r\n      <ReactApexCharts\r\n        options={options}\r\n        series={series}\r\n        type=\"bar\"\r\n        height={height}\r\n        width={width}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nBarChart.propTypes = {\r\n  title: PropTypes.string,\r\n  categories: PropTypes.array,\r\n  data: PropTypes.array,\r\n  dataCount: PropTypes.number,\r\n  seriesName: PropTypes.string,\r\n  height: PropTypes.number,\r\n  width: PropTypes.number,\r\n};\r\n\r\nexport default BarChart;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport BarChart from './BarChart';\r\n\r\nconst AverageRatings = ({ ratingsData, ratingsCount }) => {\r\n  const categories = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'];\r\n\r\n  return (\r\n    <BarChart\r\n      title=\"Ratings per Stars\"\r\n      categories={categories}\r\n      data={ratingsData}\r\n      dataCount={ratingsCount}\r\n      seriesName=\"Ratings\"\r\n      height={350}\r\n      width={600}\r\n    />\r\n  );\r\n};\r\n\r\nAverageRatings.propTypes = {\r\n  ratingsData: PropTypes.array,\r\n  ratingsCount: PropTypes.number,\r\n};\r\n\r\nexport default AverageRatings;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './MainInfos.scss';\r\n\r\n/**\r\n * Get average, public average and days watched\r\n * @param {Array} ratings\r\n * @param {Number} ratingsCount\r\n * @return {Array} average, puAverage, daysWatched\r\n */\r\nfunction getAnalyzedData(ratings, ratingsCount) {\r\n  const ratingsSum = ratings.reduce((a, b) => a + (b.rating || 0), 0);\r\n  const average = parseFloat((ratingsSum / ratingsCount).toFixed(1));\r\n  const pubRatingsSum = ratings.reduce((a, b) => a + (b.imdbRating || 0), 0);\r\n  const pubAverage = parseFloat((pubRatingsSum / ratingsCount).toFixed(1));\r\n  const minutesSum = ratings.reduce((a, b) => a + (b.runtime || 0), 0);\r\n  const daysWatched = parseFloat((minutesSum / 60 / 24).toFixed(1));\r\n\r\n  return [average, pubAverage, daysWatched];\r\n}\r\n\r\nconst MainInfos = ({ ratings, ratingsCount }) => {\r\n  const [average, pubAverage, daysWatched] = getAnalyzedData(\r\n    ratings,\r\n    ratingsCount\r\n  );\r\n\r\n  return (\r\n    <div className=\"chart-container\">\r\n      <table>\r\n        <tbody>\r\n          <KeyValue description=\"ratings\" value={ratingsCount} />\r\n          <KeyValue description=\"your avg rating\" value={average} />\r\n          <KeyValue description=\"public avg rating\" value={pubAverage} />\r\n          <KeyValue description=\"days watched\" value={daysWatched} />\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nMainInfos.propTypes = {\r\n  ratings: PropTypes.array,\r\n  ratingsCount: PropTypes.number,\r\n};\r\n\r\nconst KeyValue = ({ description, value }) => {\r\n  return (\r\n    <tr>\r\n      <td className=\"info-value\">{value}</td>\r\n      <td className=\"info-key\">{description}</td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nKeyValue.propTypes = {\r\n  description: PropTypes.string,\r\n  value: PropTypes.number,\r\n};\r\n\r\nexport default MainInfos;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AverageRatings from './charts/AverageRatings';\r\nimport MainInfos from './charts/MainInfos';\r\nimport './Dashboard.scss';\r\n\r\nconst countOccurences = ratings => {\r\n  const ratingsArray = ratings.map(rating => rating.rating);\r\n  const counts = Array(10).fill(0);\r\n\r\n  for (let i = 0; i < ratingsArray.length; i++) {\r\n    const num = ratingsArray[i] - 1;\r\n    counts[num] = counts[num] ? counts[num] + 1 : 1;\r\n  }\r\n\r\n  return counts;\r\n};\r\n\r\nconst Dashboard = ({ ratings }) => {\r\n  const ratingsCount = ratings.length;\r\n\r\n  return (\r\n    <div className=\"main-component\">\r\n      <MainInfos ratings={ratings} ratingsCount={ratingsCount} />\r\n      <AverageRatings\r\n        ratingsData={countOccurences(ratings)}\r\n        ratingsCount={ratingsCount}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nDashboard.propTypes = {\r\n  ratings: PropTypes.array,\r\n};\r\n\r\nexport default Dashboard;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport BarChart from './BarChart';\r\n\r\nconst weekdays = [\r\n  'Monday',\r\n  'Tuesday',\r\n  'Wednesday',\r\n  'Thursday',\r\n  'Friday',\r\n  'Saturday',\r\n  'Sunday',\r\n];\r\n\r\n/**\r\n * Count Ratings per Weekday\r\n * @param {Array} ratings\r\n * @return {Array}\r\n */\r\nfunction countRatings(ratings) {\r\n  const counts = [0, 0, 0, 0, 0, 0, 0];\r\n\r\n  const weekdayRatings = ratings.reduce((prevValue, currentValue) => {\r\n    const weekday = currentValue.dateRated.getDay();\r\n    prevValue[weekday]++;\r\n    return prevValue;\r\n  }, counts);\r\n\r\n  // move Sunday to the end\r\n  weekdayRatings.push(weekdayRatings.shift());\r\n  return weekdayRatings;\r\n}\r\n\r\nconst RatingsPerWeekday = ({ ratings }) => {\r\n  const ratingsCount = ratings.length;\r\n  const ratingsPerWeekday = countRatings(ratings);\r\n  console.log('ratingsPerWeekday =>', ratingsPerWeekday);\r\n\r\n  return (\r\n    <div>\r\n      <BarChart\r\n        title=\"Ratings per Weekday\"\r\n        categories={weekdays}\r\n        data={ratingsPerWeekday}\r\n        dataCount={ratingsCount}\r\n        seriesName=\"Weekday\"\r\n        width={600}\r\n        height={350}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nRatingsPerWeekday.propTypes = {\r\n  ratings: PropTypes.array,\r\n};\r\n\r\nexport default RatingsPerWeekday;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport BarChart from './BarChart';\r\n\r\nconst countOccurences = (ratings, years) => {\r\n  const ratingsArray = ratings.map(rating => rating.dateRated.getFullYear());\r\n  const counts = Array(years).fill(0);\r\n\r\n  for (let i = 0; i < ratingsArray.length; i++) {\r\n    const year = ratingsArray[i];\r\n    const index = years.indexOf(year);\r\n    counts[index] = counts[index] ? counts[index] + 1 : 1;\r\n  }\r\n\r\n  return counts;\r\n};\r\n\r\n/**\r\n * Returns years in which the user rated\r\n * @param {Array} ratings\r\n * @return {Array}\r\n */\r\nfunction uniqueYears(ratings) {\r\n  const unique = [\r\n    ...new Set(ratings.map(rating => rating.dateRated.getFullYear())),\r\n  ];\r\n  unique.sort();\r\n  return unique;\r\n}\r\n\r\nconst RatingsPerYear = ({ ratings }) => {\r\n  const ratingsCount = ratings.length;\r\n  const ratedYears = uniqueYears(ratings);\r\n  const yearsData = countOccurences(ratings, ratedYears);\r\n\r\n  return (\r\n    <BarChart\r\n      title=\"Ratings per Year\"\r\n      categories={ratedYears}\r\n      data={yearsData}\r\n      dataCount={ratingsCount}\r\n      seriesName=\"Year\"\r\n      width={600}\r\n      height={350}\r\n    />\r\n  );\r\n};\r\n\r\nRatingsPerYear.propTypes = {\r\n  ratings: PropTypes.array,\r\n};\r\n\r\nexport default RatingsPerYear;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ReactApexCharts from 'react-apexcharts';\r\n\r\nconst LineColumn = ({\r\n  title,\r\n  categories,\r\n  columnName,\r\n  columnData,\r\n  lineName,\r\n  lineData,\r\n  height,\r\n  width,\r\n}) => {\r\n  const options = {\r\n    stroke: {\r\n      width: [0, 4],\r\n    },\r\n    title: {\r\n      text: title,\r\n      floating: true,\r\n      align: 'center',\r\n      style: {\r\n        color: '#ffffff',\r\n      },\r\n    },\r\n    labels: categories,\r\n    yaxis: [\r\n      {\r\n        title: {\r\n          text: columnName,\r\n        },\r\n        decimalsInFloat: 0,\r\n      },\r\n      {\r\n        opposite: true,\r\n        title: {\r\n          text: lineName,\r\n        },\r\n        decimalsInFloat: 1,\r\n      },\r\n    ],\r\n    grid: {\r\n      yaxis: {\r\n        lines: {\r\n          show: false,\r\n        },\r\n      },\r\n    },\r\n    chart: {\r\n      toolbar: {\r\n        tools: {\r\n          download: false,\r\n        },\r\n      },\r\n    },\r\n    tooltip: {\r\n      theme: 'dark',\r\n    },\r\n  };\r\n\r\n  const series = [\r\n    {\r\n      name: columnName,\r\n      type: 'column',\r\n      data: columnData,\r\n    },\r\n    {\r\n      name: lineName,\r\n      type: 'line',\r\n      data: lineData,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"chart-container\">\r\n      <ReactApexCharts\r\n        series={series}\r\n        options={options}\r\n        type=\"line\"\r\n        height={height}\r\n        width={width}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nLineColumn.propTypes = {\r\n  title: PropTypes.string,\r\n  categories: PropTypes.array,\r\n  columnName: PropTypes.string,\r\n  columnData: PropTypes.array,\r\n  lineName: PropTypes.string,\r\n  lineData: PropTypes.array,\r\n  height: PropTypes.number,\r\n  width: PropTypes.number,\r\n};\r\n\r\nexport default LineColumn;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LineColumn from './LineColumn';\r\n\r\n/**\r\n * Convert a year to it's decade\r\n * @param {Number} year\r\n * @return {Number}\r\n */\r\nfunction yearToDecade(year) {\r\n  return Math.floor(year / 10) * 10;\r\n}\r\n\r\n/**\r\n * returns decades for x-axis\r\n * @return {Array}\r\n */\r\nfunction getDecades() {\r\n  // earliest movie on imdb is from 1874 https://www.imdb.com/title/tt3155794/?ref_=ttls_li_tt\r\n  const firstDecade = 1870;\r\n  const now = new Date();\r\n  const arr = [];\r\n\r\n  for (let i = firstDecade; i <= yearToDecade(now.getFullYear()); i += 10) {\r\n    arr.push(i);\r\n  }\r\n\r\n  return arr;\r\n}\r\n\r\n/**\r\n * Returns amount of Ratings and avg rating per decade\r\n * @param {Array} ratings\r\n * @param {Array} decades\r\n * @return {Array}\r\n */\r\nfunction analysePerDecades(ratings, decades) {\r\n  const amountDecades = decades.length;\r\n  const counts = Array(amountDecades).fill(0);\r\n  const avgRating = Array(amountDecades).fill(0);\r\n\r\n  for (let i = 0; i < ratings.length; i++) {\r\n    const rating = ratings[i].rating;\r\n    const decade = yearToDecade(ratings[i].year);\r\n    const index = decades.indexOf(decade);\r\n    counts[index] = counts[index] + 1;\r\n    avgRating[index] = avgRating[index] + rating;\r\n  }\r\n\r\n  for (let i = 0; i < avgRating.length; i++) {\r\n    avgRating[i] = avgRating[i]\r\n      ? parseFloat((avgRating[i] / counts[i]).toFixed(1))\r\n      : 0;\r\n  }\r\n\r\n  console.log('counts =>', counts);\r\n  console.log('avgRating =>', avgRating);\r\n\r\n  return [counts, avgRating];\r\n}\r\n\r\nconst RatingsPerDecade = ({ ratings }) => {\r\n  const decades = getDecades();\r\n  console.log('decades =>', decades);\r\n  const [counts, avgRating] = analysePerDecades(ratings, decades);\r\n\r\n  return (\r\n    <div>\r\n      <LineColumn\r\n        title=\"Ratings per Decade\"\r\n        categories={decades}\r\n        columnName=\"Amount of Ratings\"\r\n        columnData={counts}\r\n        lineName=\"Average Rating\"\r\n        lineData={avgRating}\r\n        width={1200}\r\n        height={378}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nRatingsPerDecade.propTypes = {\r\n  ratings: PropTypes.array,\r\n};\r\n\r\nexport default RatingsPerDecade;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Table from './Table';\r\n\r\n/**\r\n * Splits deviations to negatives and positives and sorts them\r\n * @param {Array} ratings\r\n * @return {Array} positives and negatives\r\n */\r\nfunction splitAndSort(ratings) {\r\n  const positives = ratings.filter(rating => {\r\n    return rating.deviation > 0;\r\n  });\r\n\r\n  const negatives = ratings.filter(rating => {\r\n    return rating.deviation < 0;\r\n  });\r\n\r\n  // sort highest deviation first\r\n  positives.sort((a, b) => b.deviation - a.deviation);\r\n  negatives.sort((a, b) => a.deviation - b.deviation);\r\n\r\n  return [positives, negatives];\r\n}\r\n\r\nconst Deviation = ({ ratings }) => {\r\n  const [positives, negatives] = splitAndSort(ratings);\r\n  console.log('positives =>', positives);\r\n  console.log('negatives =>', negatives);\r\n\r\n  const columns = [\r\n    {\r\n      Header: 'Title',\r\n      accessor: 'title',\r\n    },\r\n    {\r\n      Header: 'Your Rating',\r\n      accessor: 'rating',\r\n    },\r\n    {\r\n      Header: 'IMDb Rating',\r\n      accessor: 'imdbRating',\r\n    },\r\n    {\r\n      Header: 'Deviation',\r\n      accessor: 'deviation',\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"main-component\">\r\n      <div style={{ float: 'left', width: '45%' }}>\r\n        <h3>Positive</h3>\r\n        <Table data={positives} columns={columns} defaultPageSize={15} />\r\n      </div>\r\n      <div style={{ float: 'right', width: '45%' }}>\r\n        <h3>Negative</h3>\r\n        <Table data={negatives} columns={columns} defaultPageSize={15} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nDeviation.propTypes = {\r\n  ratings: PropTypes.array,\r\n};\r\n\r\nexport default Deviation;\r\n","import RatingsTable from '../components/RatingsTable';\r\nimport Dashboard from '../components/Dashboard';\r\nimport Time from '../components/Time';\r\nimport Deviations from '../components/Deviations';\r\n\r\nconst routes = [\r\n  {\r\n    name: 'Dashboard',\r\n    icon: 'bubble_chart',\r\n    path: '/',\r\n    component: Dashboard,\r\n  },\r\n  {\r\n    name: 'Ratings',\r\n    icon: 'list',\r\n    path: '/ratings',\r\n    component: RatingsTable,\r\n  },\r\n  {\r\n    name: 'Time',\r\n    icon: 'calendar_today',\r\n    path: '/time',\r\n    component: Time,\r\n  },\r\n  {\r\n    name: 'Deviations',\r\n    icon: 'call_split',\r\n    path: '/deviations',\r\n    component: Deviations,\r\n  },\r\n];\r\n\r\nexport default routes;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport RatingsPerWeekday from './charts/RatingsPerWeekday';\r\nimport RatingsPerYear from './charts/RatingsPerYear';\r\nimport RatingssPerDecade from './charts/RatingsPerDecade';\r\n\r\nconst Time = ({ ratings }) => {\r\n  return (\r\n    <div className=\"main-component\">\r\n      <RatingsPerWeekday ratings={ratings} />\r\n      <RatingsPerYear ratings={ratings} />\r\n      <RatingssPerDecade ratings={ratings} />\r\n    </div>\r\n  );\r\n};\r\n\r\nTime.propTypes = {\r\n  ratings: PropTypes.array,\r\n};\r\n\r\nexport default Time;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Sidebar.scss';\r\nimport { Link } from 'react-router-dom';\r\nimport routes from '../util/routes';\r\nimport mediaTypes from '../constants/mediaTypes';\r\n\r\n/**\r\n * returns active route name\r\n * @param {Array} routes\r\n * @return {String}\r\n */\r\nconst getActiveRoute = routes => {\r\n  console.log(routes);\r\n\r\n  const currentRoute = routes.find(route => {\r\n    const lastPath = window.location.pathname.substr(\r\n      window.location.pathname.lastIndexOf('/')\r\n    );\r\n\r\n    return route.path === lastPath;\r\n  });\r\n\r\n  return currentRoute.name;\r\n};\r\n\r\nconst Sidebar = ({ loadedMediaTypes, filterMovies }) => {\r\n  const precheckBoxes = loadedMediaTypes.map(typeId => {\r\n    return [typeId, true];\r\n  });\r\n  const [forceUpdate, setForceUpdate] = useState(1);\r\n  const [checkedItems, setCheckedItems] = useState(new Map(precheckBoxes));\r\n\r\n  const handleCheckboxChange = event => {\r\n    const id = parseInt(event.target.value);\r\n    const isChecked = event.target.checked;\r\n    setCheckedItems(checkedItems.set(id, isChecked));\r\n    setForceUpdate(forceUpdate + 1);\r\n    filterMovies(checkedItems);\r\n  };\r\n\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <SidebarElements />\r\n      <div>\r\n        <h3 className=\"filter-heading\">Filter</h3>\r\n        {checkedItems\r\n          ? loadedMediaTypes.map(typeId => {\r\n              return (\r\n                <Checkbox\r\n                  key={typeId}\r\n                  id={typeId}\r\n                  name={mediaTypes[typeId].name}\r\n                  checked={checkedItems.get(typeId)}\r\n                  onChange={handleCheckboxChange}\r\n                />\r\n              );\r\n            })\r\n          : 'loading'}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nSidebar.propTypes = {\r\n  loadedMediaTypes: PropTypes.array,\r\n  filterMovies: PropTypes.func,\r\n};\r\n\r\nconst SidebarElements = () => {\r\n  const [active, setActive] = useState(getActiveRoute(routes));\r\n\r\n  const isActive = name => {\r\n    return active === name;\r\n  };\r\n\r\n  return routes ? (\r\n    <div>\r\n      {routes.map(route => {\r\n        return (\r\n          <div key={route.name}>\r\n            <Link\r\n              to={`${process.env.PUBLIC_URL}${route.path}`}\r\n              className=\"sidebar-link\"\r\n            >\r\n              <div className={isActive(route.name) ? 'active-tab' : ''}>\r\n                <div\r\n                  onClick={() => setActive(route.name)}\r\n                  className=\"sidebar-box\"\r\n                >\r\n                  <i className=\"material-icons sidebar-icon\">{route.icon}</i>\r\n                  <span className=\"sidebar-text\">{route.name}</span>\r\n                </div>\r\n              </div>\r\n            </Link>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  ) : (\r\n    'Loading'\r\n  );\r\n};\r\n\r\nconst Checkbox = ({ id, name, checked, onChange }) => {\r\n  return (\r\n    <label className=\"filter-checkbox-label\">\r\n      <input\r\n        type=\"checkbox\"\r\n        className=\"custom-checkbox\"\r\n        value={id}\r\n        name={name}\r\n        checked={checked}\r\n        onChange={onChange}\r\n      />\r\n      <span className=\"checkmark\" />\r\n      {name}\r\n    </label>\r\n  );\r\n};\r\n\r\nCheckbox.propTypes = {\r\n  id: PropTypes.number,\r\n  name: PropTypes.string,\r\n  checked: PropTypes.bool,\r\n  onChange: PropTypes.func,\r\n};\r\n\r\nexport default Sidebar;\r\n","/**\r\n * Load data from session storage to component state\r\n * @param {Function} setRatings\r\n * @param {Function} setLoadedMediaTypes\r\n * @param {Function} setLoaded\r\n */\r\nasync function recoverData(setRatings, setLoadedMediaTypes, setLoaded) {\r\n  const sessionRatings = sessionStorage.getItem('ratings');\r\n\r\n  // load data from session storage\r\n  if (sessionRatings) {\r\n    const ratingsJSON = await JSON.parse(sessionRatings);\r\n    const ratings = await recoverDates(ratingsJSON);\r\n    setRatings(ratings);\r\n    console.log(ratings);\r\n    setLoadedMediaTypes(\r\n      sessionStorage\r\n        .getItem('mediaTypes')\r\n        .split(',')\r\n        .map(item => parseInt(item))\r\n    );\r\n    setLoaded(true);\r\n  }\r\n}\r\n\r\n/**\r\n * Convert Date Strings to Javascript Dates\r\n * @param {Array} ratings\r\n * @return {Array}\r\n */\r\nasync function recoverDates(ratings) {\r\n  return ratings.map(rating => {\r\n    rating.dateRated = new Date(rating.dateRated);\r\n    return rating;\r\n  });\r\n}\r\n\r\nexport default recoverData;\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './App.scss';\r\nimport Uploader from './components/Uploader';\r\nimport TitleBar from './components/TitleBar';\r\nimport Sidebar from './components/Sidebar';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport routes from './util/routes';\r\nimport recoverData from './util/recoverData';\r\n\r\nconst App = () => {\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [ratings, setRatings] = useState();\r\n  const [loadedMediaTypes, setLoadedMediaTypes] = useState();\r\n\r\n  useEffect(() => {\r\n    if (!loaded) {\r\n      recoverData(setRatings, setLoadedMediaTypes, setLoaded);\r\n    }\r\n  }, [loaded]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <TitleBar />\r\n      <div className=\"main-content\">\r\n        {loaded ? (\r\n          <Router>\r\n            <LoadedApp ratings={ratings} loadedMediaTypes={loadedMediaTypes} />\r\n          </Router>\r\n        ) : (\r\n          <Uploader\r\n            setLoaded={setLoaded}\r\n            setRatings={setRatings}\r\n            setLoadedMediaTypes={setLoadedMediaTypes}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst LoadedApp = ({ ratings, loadedMediaTypes }) => {\r\n  const [filteredRatings, setFilteredRatings] = useState(ratings);\r\n\r\n  const filterMovies = filterMap => {\r\n    const filtered = ratings.filter(\r\n      rating => filterMap.get(rating.mediaTypeId) === true\r\n    );\r\n\r\n    setFilteredRatings(filtered);\r\n  };\r\n\r\n  const routeComponents = routes.map(({ path, component: Component, name }) => {\r\n    return (\r\n      <Route\r\n        exact\r\n        path={`${process.env.PUBLIC_URL}${path}`}\r\n        render={() => <Component ratings={filteredRatings} />}\r\n        key={name}\r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <Sidebar\r\n        loadedMediaTypes={loadedMediaTypes}\r\n        filterMovies={filterMovies}\r\n      />\r\n      {routeComponents}\r\n      {/* <RatingsTable ratings={ratings} /> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nLoadedApp.propTypes = {\r\n  ratings: PropTypes.array,\r\n  loadedMediaTypes: PropTypes.array,\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\n/**\r\n * Registers a Service Worker\r\n * @param {Object} config\r\n */\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Register a Valid Service Worker\r\n * @param {String} swUrl\r\n * @param {Object} config\r\n */\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\n/**\r\n * Check a valid Service Worker\r\n * @param {String} swUrl\r\n * @param {Object} config\r\n */\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\n/**\r\n * Unregister Service worker\r\n */\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}