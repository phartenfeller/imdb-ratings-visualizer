{"version":3,"sources":["App.scss","components/TitleBar.scss","components/Sidebar.scss","components/RatingsTable.scss","components/charts/MainInfos.scss","components/Dashboard.scss","constants/mediaTypes.js","util/fileUpload.js","util/getUniqueMediaTypes.js","components/Uploader.js","components/TitleBar.js","components/RatingsTable.js","components/charts/BarChart.js","components/charts/AverageRatings.js","components/charts/MainInfos.js","components/Dashboard.js","components/charts/RatingsPerWeekday.js","components/charts/RatingsPerYear.js","components/charts/LineColumn.js","components/charts/RatingsPerDecade.js","util/routes.js","components/Time.js","components/Sidebar.js","util/recoverData.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","colorBlack","creamYellow","mediaTypes","name","exportName","separator","uploadFile","_callee","file","csv","regenerator_default","a","wrap","_context","prev","next","readFile","sent","abrupt","csvToJson","stop","Promise","resolve","reject","fileReader","FileReader","onloadend","event","content","target","result","onerror","err","readAsText","rawCsv","lines","replace","changeHeaders","v","cleanData","split","console","log","data","headers","map","line","indexLine","obj","currentline","header","indexHeader","push","pop","review","mediaTypeId","findIndex","mediaType","rating","parseInt","runtime","votes","year","imdbRating","parseFloat","dateRated","Date","dateRatedString","genres","directors","getUniqueMediaTypes","ratings","unique","Object","toConsumableArray","Set","sort","Uploader","_ref","setLoaded","setRatings","setLoadedMediaTypes","upload","_ref2","asyncToGenerator","mark","json","document","getElementById","files","sessionStorage","setItem","JSON","stringify","apply","this","arguments","react_default","createElement","className","type","id","onChange","TitleBar","RatingsTable","nextText","style","verticalAlign","previousText","es","columns","Header","accessor","defaultSorted","desc","defaultPageSize","pageSizeOptions","minRows","colors","BarChart","title","categories","dataCount","seriesName","height","width","options","plotOptions","bar","dataLabels","position","distributed","backgroundBarOpacity","enabled","formatter","val","Math","round","fontSize","xaxis","labels","text","floating","align","color","tooltip","x","show","grid","chart","toolbar","tools","download","series","react_apexcharts_min_default","AverageRatings","ratingsData","ratingsCount","charts_BarChart","KeyValue","description","value","MainInfos","average","reduce","b","toFixed","MainInfos_KeyValue","countOccurences","ratingsArray","counts","Array","fill","i","length","num","weekdays","RatingsPerWeekday","ratingsPerWeekday","weekdayRatings","prevValue","currentValue","getDay","shift","countRatings","RatingsPerYear","ratedYears","getFullYear","uniqueYears","yearsData","years","index","indexOf","LineColumn","columnName","columnData","lineName","lineData","stroke","yaxis","decimalsInFloat","opposite","yearToDecade","floor","RatingsPerDecade","decades","now","arr","getDecades","_analysePerDecades","amountDecades","avgRating","decade","analysePerDecades","_analysePerDecades2","slicedToArray","charts_LineColumn","routes","icon","path","component","components_charts_MainInfos","charts_AverageRatings","charts_RatingsPerWeekday","charts_RatingsPerYear","charts_RatingsPerDecade","SidebarElements","_useState5","useState","find","route","lastPath","window","location","pathname","substr","lastIndexOf","_useState6","active","setActive","key","Link","to","concat","process","onClick","Checkbox","checked","Sidebar","loadedMediaTypes","filterMovies","precheckBoxes","typeId","_useState","_useState2","forceUpdate","setForceUpdate","_useState3","Map","_useState4","checkedItems","setCheckedItems","handleCheckboxChange","isChecked","set","Sidebar_SidebarElements","Sidebar_Checkbox","get","sessionRatings","ratingsJSON","getItem","parse","recoverDates","item","_callee2","_context2","recoverData","LoadedApp","_useState7","_useState8","filteredRatings","setFilteredRatings","routeComponents","Component","Route","exact","render","src_components_Sidebar","filterMap","filtered","filter","App","loaded","useEffect","src_components_TitleBar","BrowserRouter","App_LoadedApp","src_components_Uploader","Boolean","hostname","match","ReactDOM","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0838b2d9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"colorBlack\":\"black\",\"creamYellow\":\"#ffee70\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"colorBlack\":\"black\",\"creamYellow\":\"#ffee70\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"colorBlack\":\"black\",\"creamYellow\":\"#ffee70\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"colorBlack\":\"black\",\"creamYellow\":\"#ffee70\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"colorBlack\":\"black\",\"creamYellow\":\"#ffee70\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"colorBlack\":\"black\",\"creamYellow\":\"#ffee70\"};","const mediaTypes = [\r\n  {\r\n    name: 'Movie',\r\n    exportName: 'movie',\r\n  },\r\n  {\r\n    name: 'TV Movie',\r\n    exportName: 'tvMovie',\r\n  },\r\n  {\r\n    name: 'Series',\r\n    exportName: 'tvSeries',\r\n  },\r\n  {\r\n    name: 'Mini Series',\r\n    exportName: 'tvMiniSeries',\r\n  },\r\n  {\r\n    name: 'Episode',\r\n    exportName: 'tvEpisode',\r\n  },\r\n  {\r\n    name: 'Video',\r\n    exportName: 'video',\r\n  },\r\n  {\r\n    name: 'Short',\r\n    exportName: 'short',\r\n  },\r\n  {\r\n    name: 'TV Short',\r\n    exportName: 'tvShort',\r\n  },\r\n  {\r\n    name: 'TV Special',\r\n    exportName: 'tvSpecial',\r\n  },\r\n  {\r\n    name: 'Video Game',\r\n    exportName: 'videoGame',\r\n  },\r\n];\r\n\r\nexport default mediaTypes;\r\n","import mediaTypes from '../constants/mediaTypes';\r\n\r\nconst separator = '***';\r\n\r\n/**\r\n * Upload Process for File\r\n * @param {Blob} file\r\n * @return {JSON}\r\n */\r\nasync function uploadFile(file) {\r\n  const csv = await readFile(file);\r\n  return csvToJson(csv);\r\n}\r\n\r\n/**\r\n * Read Contents of a File\r\n * @param {Blob} file\r\n * @return {String}\r\n */\r\nfunction readFile(file) {\r\n  return new Promise((resolve, reject) => {\r\n    const fileReader = new FileReader();\r\n    fileReader.onloadend = event => {\r\n      const content = event.target.result;\r\n      resolve(content);\r\n    };\r\n\r\n    fileReader.onerror = err => {\r\n      reject(err);\r\n    };\r\n    fileReader.readAsText(file, 'Windows-1252');\r\n  });\r\n}\r\n\r\n/**\r\n * Translate CSV to JSON\r\n * @param {String} rawCsv\r\n * @return {JSON}\r\n */\r\nfunction csvToJson(rawCsv) {\r\n  const csv = cleanData(rawCsv);\r\n\r\n  const lines = csv.split('\\n');\r\n  console.log(lines[0]);\r\n  let result = [];\r\n  const headers = lines[0].split(separator);\r\n\r\n  lines.map((line, indexLine) => {\r\n    if (indexLine < 1) return result; // Jump header line\r\n\r\n    const obj = {};\r\n    const currentline = line.split(separator);\r\n\r\n    headers.map((header, indexHeader) => {\r\n      obj[header] = currentline[indexHeader];\r\n      return obj;\r\n    });\r\n\r\n    result.push(obj);\r\n    return result;\r\n  });\r\n\r\n  result.pop(); // remove the last item because undefined values\r\n\r\n  result = convertDatatypes(result);\r\n\r\n  console.log(result);\r\n  return result;\r\n}\r\n\r\n/**\r\n * Clean CSV Data\r\n * @param {String} csv\r\n * @return {String}\r\n */\r\nfunction cleanData(csv) {\r\n  let cleanedCsv;\r\n  cleanedCsv = changeHeaders(csv);\r\n  // change all commas in titles to ###\r\n  cleanedCsv = cleanedCsv.replace(/\"[^\"]+\"/g, v => {\r\n    return v.replace(/,/g, '###');\r\n  });\r\n\r\n  // change all comma seperators to own separator\r\n  cleanedCsv = cleanedCsv.replace(/,/g, separator);\r\n\r\n  // change back to commas in title\r\n  cleanedCsv = cleanedCsv.replace(/###/g, ',');\r\n\r\n  // remove quotes in titles\r\n  cleanedCsv = cleanedCsv.replace(/\"/g, '');\r\n\r\n  return cleanedCsv;\r\n}\r\n\r\n/**\r\n * Change Headers of CSV\r\n * @param {String} csv\r\n * @return {String}\r\n */\r\nfunction changeHeaders(csv) {\r\n  let cleanedCsv;\r\n  cleanedCsv = csv.replace('Const,', 'id,');\r\n  cleanedCsv = cleanedCsv.replace('Your Rating,', 'rating,');\r\n  cleanedCsv = cleanedCsv.replace('Title,', 'title,');\r\n  cleanedCsv = cleanedCsv.replace('Date Rated,', 'dateRatedString,');\r\n  cleanedCsv = cleanedCsv.replace('Genres,', 'genres,');\r\n  cleanedCsv = cleanedCsv.replace('Title Type,', 'mediaType,');\r\n  cleanedCsv = cleanedCsv.replace('Num Votes,', 'votes,');\r\n  cleanedCsv = cleanedCsv.replace('Runtime (mins),', 'runtime,');\r\n  cleanedCsv = cleanedCsv.replace('Release Date,', 'releaseDate,');\r\n  cleanedCsv = cleanedCsv.replace('URL,', 'url,');\r\n  cleanedCsv = cleanedCsv.replace('Year,', 'year,');\r\n  cleanedCsv = cleanedCsv.replace('IMDb Rating,', 'imdbRating,');\r\n  cleanedCsv = cleanedCsv.replace(',Directors', ',directors');\r\n  return cleanedCsv;\r\n}\r\n\r\n/**\r\n * Covert Strings to corresponding datatypes\r\n * @param {Array} data\r\n * @return {Array}\r\n */\r\nfunction convertDatatypes(data) {\r\n  data.map(review => {\r\n    const mediaTypeId = mediaTypes.findIndex(\r\n      mediaType => mediaType.exportName === review.mediaType\r\n    );\r\n\r\n    review.rating = parseInt(review.rating);\r\n    review.runtime = parseInt(review.runtime);\r\n    review.votes = parseInt(review.votes);\r\n    review.year = parseInt(review.year);\r\n    review.imdbRating = parseFloat(review.imdbRating);\r\n    review.dateRated = new Date(review.dateRatedString);\r\n    review.mediaTypeId = mediaTypeId;\r\n    review.mediaType = mediaTypes[mediaTypeId].name;\r\n    review.genres = review.genres.split(', ');\r\n    review.directors = review.directors.split(', ');\r\n    return review;\r\n  });\r\n\r\n  return data;\r\n}\r\n\r\nexport { uploadFile };\r\n","/**\r\n * Check which mediaTypes are present in Uplaoad\r\n * @param {Array} ratings\r\n * @return {Array}\r\n */\r\nfunction getUniqueMediaTypes(ratings) {\r\n  let unique = [...new Set(ratings.map(rating => rating.mediaTypeId))];\r\n  unique = unique.sort();\r\n  return unique;\r\n}\r\n\r\nexport default getUniqueMediaTypes;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { uploadFile } from '../util/fileUpload';\r\nimport getUniqueMediaTypes from '../util/getUniqueMediaTypes';\r\nimport './Uploader.scss';\r\n\r\nconst Uploader = ({ setLoaded, setRatings, setLoadedMediaTypes }) => {\r\n  const upload = async () => {\r\n    const file = document.getElementById('fileUpload').files[0];\r\n    const json = await uploadFile(file);\r\n    const mediaTypes = getUniqueMediaTypes(json);\r\n    console.log(mediaTypes);\r\n    setRatings(json);\r\n    setLoadedMediaTypes(mediaTypes);\r\n    setLoaded(true);\r\n    sessionStorage.setItem('ratings', JSON.stringify(json));\r\n    sessionStorage.setItem('mediaTypes', mediaTypes);\r\n  };\r\n\r\n  return (\r\n    <div className=\"uploader\">\r\n      <h1>Upload IMDb Ratings CSV</h1>\r\n      <input type=\"file\" id=\"fileUpload\" onChange={upload} />\r\n    </div>\r\n  );\r\n};\r\n\r\nUploader.propTypes = {\r\n  setLoaded: PropTypes.func,\r\n  setRatings: PropTypes.func,\r\n  setLoadedMediaTypes: PropTypes.func,\r\n};\r\n\r\nexport default Uploader;\r\n","import React from 'react';\r\nimport './TitleBar.scss';\r\n\r\nconst TitleBar = () => {\r\n  return (\r\n    <div className=\"title-bar\">\r\n      <span className=\"app-name\">IMDb Ratings Visualizer</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TitleBar;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ReactTable from 'react-table';\r\nimport './RatingsTable.scss';\r\n\r\nconst RatingsTable = ({ ratings }) => {\r\n  const columns = [\r\n    {\r\n      Header: 'ID',\r\n      accessor: 'id',\r\n    },\r\n    {\r\n      Header: 'Title',\r\n      accessor: 'title',\r\n    },\r\n    {\r\n      Header: 'Rating',\r\n      accessor: 'rating',\r\n    },\r\n    {\r\n      Header: 'Type',\r\n      accessor: 'mediaType',\r\n    },\r\n    {\r\n      Header: 'Date Rated',\r\n      accessor: 'dateRatedString',\r\n    },\r\n    {\r\n      Header: 'Genres',\r\n      accessor: 'genres',\r\n    },\r\n  ];\r\n\r\n  const defaultSorted = [\r\n    {\r\n      id: 'rating',\r\n      desc: true,\r\n    },\r\n  ];\r\n\r\n  const nextText = (\r\n    <span>\r\n      <span style={{ verticalAlign: 'middle' }}>Next</span>\r\n      <i className=\"material-icons pagination-icon\">keyboard_arrow_right</i>\r\n    </span>\r\n  );\r\n\r\n  const previousText = (\r\n    <span>\r\n      <i className=\"material-icons pagination-icon left-pagination-icon\">\r\n        keyboard_arrow_left\r\n      </i>\r\n      <span>Previous</span>\r\n    </span>\r\n  );\r\n\r\n  return (\r\n    <ReactTable\r\n      data={ratings}\r\n      // resolveData={data => data.map(row => row)}\r\n      columns={columns}\r\n      className=\"-striped -highlight main-component\"\r\n      defaultSorted={defaultSorted}\r\n      defaultPageSize={50}\r\n      pageSizeOptions={[5, 10, 20, 25, 50, 100, 250, 1000]}\r\n      nextText={nextText}\r\n      previousText={previousText}\r\n      minRows={0}\r\n    />\r\n  );\r\n};\r\n\r\nRatingsTable.propTypes = {\r\n  ratings: PropTypes.array,\r\n};\r\n\r\nexport default RatingsTable;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ReactApexCharts from 'react-apexcharts';\r\n\r\nconst colors = [\r\n  '#FF355E',\r\n  '#FD5B78',\r\n  '#FF6037',\r\n  '#FF9933',\r\n  '#FFCC33',\r\n  '#FFFF66',\r\n  '#CCFF00',\r\n  '#66FF66',\r\n  '#50BFE6',\r\n  '#FF00CC',\r\n];\r\n\r\nconst BarChart = ({\r\n  title,\r\n  categories,\r\n  data,\r\n  dataCount,\r\n  seriesName,\r\n  height,\r\n  width,\r\n}) => {\r\n  const options = {\r\n    colors,\r\n    plotOptions: {\r\n      bar: {\r\n        dataLabels: {\r\n          position: 'top',\r\n        },\r\n        distributed: true,\r\n        colors: {\r\n          backgroundBarOpacity: 1,\r\n        },\r\n      },\r\n    },\r\n    dataLabels: {\r\n      enabled: true,\r\n      formatter: val => {\r\n        return Math.round((val / dataCount) * 100) + '%';\r\n      },\r\n      style: {\r\n        fontSize: '12px',\r\n        colors: ['#ffffff'],\r\n      },\r\n    },\r\n    xaxis: {\r\n      categories,\r\n      labels: {\r\n        style: {\r\n          colors,\r\n        },\r\n      },\r\n    },\r\n    title: {\r\n      text: title,\r\n      floating: true,\r\n      align: 'center',\r\n      style: {\r\n        color: '#ffffff',\r\n      },\r\n    },\r\n    tooltip: {\r\n      x: {\r\n        show: false,\r\n      },\r\n    },\r\n    grid: {\r\n      show: false,\r\n    },\r\n    chart: {\r\n      toolbar: {\r\n        tools: {\r\n          download: false,\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  const series = [\r\n    {\r\n      name: seriesName,\r\n      data: data,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"chart-container\">\r\n      <ReactApexCharts\r\n        options={options}\r\n        series={series}\r\n        type=\"bar\"\r\n        height={height}\r\n        width={width}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nBarChart.propTypes = {\r\n  title: PropTypes.string,\r\n  categories: PropTypes.array,\r\n  data: PropTypes.array,\r\n  dataCount: PropTypes.number,\r\n  seriesName: PropTypes.string,\r\n  height: PropTypes.number,\r\n  width: PropTypes.number,\r\n};\r\n\r\nexport default BarChart;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport BarChart from './BarChart';\r\n\r\nconst AverageRatings = ({ ratingsData, ratingsCount }) => {\r\n  const categories = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'];\r\n\r\n  return (\r\n    <BarChart\r\n      title=\"Ratings per Stars\"\r\n      categories={categories}\r\n      data={ratingsData}\r\n      dataCount={ratingsCount}\r\n      seriesName=\"Ratings\"\r\n      height={350}\r\n      width={600}\r\n    />\r\n  );\r\n};\r\n\r\nAverageRatings.propTypes = {\r\n  ratingsData: PropTypes.array,\r\n  ratingsCount: PropTypes.number,\r\n};\r\n\r\nexport default AverageRatings;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './MainInfos.scss';\r\n\r\nconst MainInfos = ({ ratings, ratingsCount }) => {\r\n  const ratingsSum = ratings.reduce((a, b) => a + (b.rating || 0), 0);\r\n  const average = (ratingsSum / ratingsCount).toFixed(1);\r\n\r\n  return (\r\n    <div className=\"chart-container\">\r\n      <KeyValue description=\"ratings\" value={ratingsCount} />\r\n      <KeyValue description=\"your avg rating\" value={average} />\r\n    </div>\r\n  );\r\n};\r\n\r\nMainInfos.propTypes = {\r\n  ratings: PropTypes.array,\r\n  ratingsCount: PropTypes.number,\r\n};\r\n\r\nconst KeyValue = ({ description, value }) => {\r\n  return (\r\n    <div>\r\n      <span className=\"info-value\">{value}</span>\r\n      <span className=\"info-key\">{description}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nKeyValue.propTypes = {\r\n  description: PropTypes.string,\r\n  value: PropTypes.number,\r\n};\r\n\r\nexport default MainInfos;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AverageRatings from './charts/AverageRatings';\r\nimport MainInfos from './charts/MainInfos';\r\nimport './Dashboard.scss';\r\n\r\nconst countOccurences = ratings => {\r\n  const ratingsArray = ratings.map(rating => rating.rating);\r\n  const counts = Array(10).fill(0);\r\n\r\n  for (let i = 0; i < ratingsArray.length; i++) {\r\n    const num = ratingsArray[i] - 1;\r\n    counts[num] = counts[num] ? counts[num] + 1 : 1;\r\n  }\r\n\r\n  return counts;\r\n};\r\n\r\nconst Dashboard = ({ ratings }) => {\r\n  const ratingsCount = ratings.length;\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"main-component\" style={{ height: '384px' }}>\r\n        <MainInfos ratings={ratings} ratingsCount={ratingsCount} />\r\n        <AverageRatings\r\n          ratingsData={countOccurences(ratings)}\r\n          ratingsCount={ratingsCount}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nDashboard.propTypes = {\r\n  ratings: PropTypes.array,\r\n};\r\n\r\nexport default Dashboard;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport BarChart from './BarChart';\r\n\r\nconst weekdays = [\r\n  'Monday',\r\n  'Tuesday',\r\n  'Wednesday',\r\n  'Thursday',\r\n  'Friday',\r\n  'Saturday',\r\n  'Sunday',\r\n];\r\n\r\n/**\r\n * Count Ratings per Weekday\r\n * @param {Array} ratings\r\n * @return {Array}\r\n */\r\nfunction countRatings(ratings) {\r\n  const counts = [0, 0, 0, 0, 0, 0, 0];\r\n\r\n  const weekdayRatings = ratings.reduce((prevValue, currentValue) => {\r\n    const weekday = currentValue.dateRated.getDay();\r\n    prevValue[weekday]++;\r\n    return prevValue;\r\n  }, counts);\r\n\r\n  // move Sunday to the end\r\n  weekdayRatings.push(weekdayRatings.shift());\r\n  return weekdayRatings;\r\n}\r\n\r\nconst RatingsPerWeekday = ({ ratings }) => {\r\n  const ratingsCount = ratings.length;\r\n  const ratingsPerWeekday = countRatings(ratings);\r\n  console.log('ratingsPerWeekday =>', ratingsPerWeekday);\r\n\r\n  return (\r\n    <div>\r\n      <BarChart\r\n        title=\"Ratings per Weekday\"\r\n        categories={weekdays}\r\n        data={ratingsPerWeekday}\r\n        dataCount={ratingsCount}\r\n        seriesName=\"Weekday\"\r\n        width={600}\r\n        height={350}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nRatingsPerWeekday.propTypes = {\r\n  ratings: PropTypes.array,\r\n};\r\n\r\nexport default RatingsPerWeekday;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport BarChart from './BarChart';\r\n\r\nconst countOccurences = (ratings, years) => {\r\n  const ratingsArray = ratings.map(rating => rating.dateRated.getFullYear());\r\n  const counts = Array(years).fill(0);\r\n\r\n  for (let i = 0; i < ratingsArray.length; i++) {\r\n    const year = ratingsArray[i];\r\n    const index = years.indexOf(year);\r\n    counts[index] = counts[index] ? counts[index] + 1 : 1;\r\n  }\r\n\r\n  return counts;\r\n};\r\n\r\n/**\r\n * Returns years in which the user rated\r\n * @param {Array} ratings\r\n * @return {Array}\r\n */\r\nfunction uniqueYears(ratings) {\r\n  const unique = [\r\n    ...new Set(ratings.map(rating => rating.dateRated.getFullYear())),\r\n  ];\r\n  unique.sort();\r\n  return unique;\r\n}\r\n\r\nconst RatingsPerYear = ({ ratings }) => {\r\n  const ratingsCount = ratings.length;\r\n  const ratedYears = uniqueYears(ratings);\r\n  const yearsData = countOccurences(ratings, ratedYears);\r\n\r\n  return (\r\n    <BarChart\r\n      title=\"Ratings per Year\"\r\n      categories={ratedYears}\r\n      data={yearsData}\r\n      dataCount={ratingsCount}\r\n      seriesName=\"Year\"\r\n      width={600}\r\n      height={350}\r\n    />\r\n  );\r\n};\r\n\r\nRatingsPerYear.propTypes = {\r\n  ratings: PropTypes.array,\r\n};\r\n\r\nexport default RatingsPerYear;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ReactApexCharts from 'react-apexcharts';\r\n\r\nconst LineColumn = ({\r\n  title,\r\n  categories,\r\n  columnName,\r\n  columnData,\r\n  lineName,\r\n  lineData,\r\n  height,\r\n  width,\r\n}) => {\r\n  const options = {\r\n    stroke: {\r\n      width: [0, 4],\r\n    },\r\n    title: {\r\n      text: title,\r\n      floating: true,\r\n      align: 'center',\r\n      style: {\r\n        color: '#ffffff',\r\n      },\r\n    },\r\n    labels: categories,\r\n    yaxis: [\r\n      {\r\n        title: {\r\n          text: columnName,\r\n        },\r\n        decimalsInFloat: 0,\r\n      },\r\n      {\r\n        opposite: true,\r\n        title: {\r\n          text: lineName,\r\n        },\r\n        decimalsInFloat: 1,\r\n      },\r\n    ],\r\n    grid: {\r\n      yaxis: {\r\n        lines: {\r\n          show: false,\r\n        },\r\n      },\r\n    },\r\n    chart: {\r\n      toolbar: {\r\n        tools: {\r\n          download: false,\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  const series = [\r\n    {\r\n      name: columnName,\r\n      type: 'column',\r\n      data: columnData,\r\n    },\r\n    {\r\n      name: lineName,\r\n      type: 'line',\r\n      data: lineData,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"chart-container\">\r\n      <ReactApexCharts\r\n        series={series}\r\n        options={options}\r\n        type=\"line\"\r\n        height={height}\r\n        width={width}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nLineColumn.propTypes = {\r\n  title: PropTypes.string,\r\n  categories: PropTypes.array,\r\n  columnName: PropTypes.string,\r\n  columnData: PropTypes.array,\r\n  lineName: PropTypes.string,\r\n  lineData: PropTypes.array,\r\n  height: PropTypes.number,\r\n  width: PropTypes.number,\r\n};\r\n\r\nexport default LineColumn;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LineColumn from './LineColumn';\r\n\r\n/**\r\n * Convert a year to it's decade\r\n * @param {Number} year\r\n * @return {Number}\r\n */\r\nfunction yearToDecade(year) {\r\n  return Math.floor(year / 10) * 10;\r\n}\r\n\r\n/**\r\n * returns decades for x-axis\r\n * @return {Array}\r\n */\r\nfunction getDecades() {\r\n  // earliest movie on imdb is from 1874 https://www.imdb.com/title/tt3155794/?ref_=ttls_li_tt\r\n  const firstDecade = 1870;\r\n  const now = new Date();\r\n  const arr = [];\r\n\r\n  for (let i = firstDecade; i <= yearToDecade(now.getFullYear()); i += 10) {\r\n    arr.push(i);\r\n  }\r\n\r\n  return arr;\r\n}\r\n\r\n/**\r\n * Returns amount of Ratings and avg rating per decade\r\n * @param {Array} ratings\r\n * @param {Array} decades\r\n * @return {Array}\r\n */\r\nfunction analysePerDecades(ratings, decades) {\r\n  const amountDecades = decades.length;\r\n  const counts = Array(amountDecades).fill(0);\r\n  const avgRating = Array(amountDecades).fill(0);\r\n\r\n  for (let i = 0; i < ratings.length; i++) {\r\n    const rating = ratings[i].rating;\r\n    const decade = yearToDecade(ratings[i].year);\r\n    const index = decades.indexOf(decade);\r\n    counts[index] = counts[index] + 1;\r\n    avgRating[index] = avgRating[index] + rating;\r\n  }\r\n\r\n  for (let i = 0; i < avgRating.length; i++) {\r\n    avgRating[i] = avgRating[i]\r\n      ? parseFloat((avgRating[i] / counts[i]).toFixed(1))\r\n      : 0;\r\n  }\r\n\r\n  console.log('counts =>', counts);\r\n  console.log('avgRating =>', avgRating);\r\n\r\n  return [counts, avgRating];\r\n}\r\n\r\nconst RatingsPerDecade = ({ ratings }) => {\r\n  const decades = getDecades();\r\n  console.log('decades =>', decades);\r\n  const [counts, avgRating] = analysePerDecades(ratings, decades);\r\n\r\n  return (\r\n    <div>\r\n      <LineColumn\r\n        title=\"Ratings per Decade\"\r\n        categories={decades}\r\n        columnName=\"Amount of Ratings\"\r\n        columnData={counts}\r\n        lineName=\"Average Rating\"\r\n        lineData={avgRating}\r\n        width={1200}\r\n        height={378}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nRatingsPerDecade.propTypes = {\r\n  ratings: PropTypes.array,\r\n};\r\n\r\nexport default RatingsPerDecade;\r\n","import RatingsTable from '../components/RatingsTable';\r\nimport Dashboard from '../components/Dashboard';\r\nimport Time from '../components/Time';\r\n\r\nconst routes = [\r\n  {\r\n    name: 'Dashboard',\r\n    icon: 'bubble_chart',\r\n    path: '/',\r\n    component: Dashboard,\r\n  },\r\n  {\r\n    name: 'Ratings',\r\n    icon: 'list',\r\n    path: '/ratings',\r\n    component: RatingsTable,\r\n  },\r\n  {\r\n    name: 'Time',\r\n    icon: 'calendar_today',\r\n    path: '/time',\r\n    component: Time,\r\n  },\r\n];\r\n\r\nexport default routes;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport RatingsPerWeekday from './charts/RatingsPerWeekday';\r\nimport RatingsPerYear from './charts/RatingsPerYear';\r\nimport RatingssPerDecade from './charts/RatingsPerDecade';\r\n\r\nconst Time = ({ ratings }) => {\r\n  return (\r\n    <div className=\"main-component\">\r\n      <RatingsPerWeekday ratings={ratings} />\r\n      <RatingsPerYear ratings={ratings} />\r\n      <RatingssPerDecade ratings={ratings} />\r\n    </div>\r\n  );\r\n};\r\n\r\nTime.propTypes = {\r\n  ratings: PropTypes.array,\r\n};\r\n\r\nexport default Time;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Sidebar.scss';\r\nimport { Link } from 'react-router-dom';\r\nimport routes from '../util/routes';\r\nimport mediaTypes from '../constants/mediaTypes';\r\n\r\n/**\r\n * returns active route name\r\n * @param {Array} routes\r\n * @return {String}\r\n */\r\nconst getActiveRoute = routes => {\r\n  console.log(routes);\r\n\r\n  const currentRoute = routes.find(route => {\r\n    const lastPath = window.location.pathname.substr(\r\n      window.location.pathname.lastIndexOf('/')\r\n    );\r\n\r\n    return route.path === lastPath;\r\n  });\r\n\r\n  return currentRoute.name;\r\n};\r\n\r\nconst Sidebar = ({ loadedMediaTypes, filterMovies }) => {\r\n  const precheckBoxes = loadedMediaTypes.map(typeId => {\r\n    return [typeId, true];\r\n  });\r\n  const [forceUpdate, setForceUpdate] = useState(1);\r\n  const [checkedItems, setCheckedItems] = useState(new Map(precheckBoxes));\r\n\r\n  const handleCheckboxChange = event => {\r\n    const id = parseInt(event.target.value);\r\n    const isChecked = event.target.checked;\r\n    setCheckedItems(checkedItems.set(id, isChecked));\r\n    setForceUpdate(forceUpdate + 1);\r\n    filterMovies(checkedItems);\r\n  };\r\n\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <SidebarElements />\r\n      <div>\r\n        <h3 className=\"filter-heading\">Filter</h3>\r\n        {checkedItems\r\n          ? loadedMediaTypes.map(typeId => {\r\n              return (\r\n                <Checkbox\r\n                  key={typeId}\r\n                  id={typeId}\r\n                  name={mediaTypes[typeId].name}\r\n                  checked={checkedItems.get(typeId)}\r\n                  onChange={handleCheckboxChange}\r\n                />\r\n              );\r\n            })\r\n          : 'loading'}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nSidebar.propTypes = {\r\n  loadedMediaTypes: PropTypes.array,\r\n  filterMovies: PropTypes.func,\r\n};\r\n\r\nconst SidebarElements = () => {\r\n  const [active, setActive] = useState(getActiveRoute(routes));\r\n\r\n  const isActive = name => {\r\n    return active === name;\r\n  };\r\n\r\n  return routes ? (\r\n    <div>\r\n      {routes.map(route => {\r\n        return (\r\n          <div key={route.name}>\r\n            <Link\r\n              to={`${process.env.PUBLIC_URL}${route.path}`}\r\n              className=\"sidebar-link\"\r\n            >\r\n              <div className={isActive(route.name) ? 'active-tab' : ''}>\r\n                <div\r\n                  onClick={() => setActive(route.name)}\r\n                  className=\"sidebar-box\"\r\n                >\r\n                  <i className=\"material-icons sidebar-icon\">{route.icon}</i>\r\n                  <span className=\"sidebar-text\">{route.name}</span>\r\n                </div>\r\n              </div>\r\n            </Link>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  ) : (\r\n    'Loading'\r\n  );\r\n};\r\n\r\nconst Checkbox = ({ id, name, checked, onChange }) => {\r\n  return (\r\n    <label className=\"filter-checkbox-label\">\r\n      <input\r\n        type=\"checkbox\"\r\n        className=\"custom-checkbox\"\r\n        value={id}\r\n        name={name}\r\n        checked={checked}\r\n        onChange={onChange}\r\n      />\r\n      {name}\r\n    </label>\r\n  );\r\n};\r\n\r\nCheckbox.propTypes = {\r\n  id: PropTypes.number,\r\n  name: PropTypes.string,\r\n  checked: PropTypes.bool,\r\n  onChange: PropTypes.func,\r\n};\r\n\r\nexport default Sidebar;\r\n","/**\r\n * Load data from session storage to component state\r\n * @param {Function} setRatings\r\n * @param {Function} setLoadedMediaTypes\r\n * @param {Function} setLoaded\r\n */\r\nasync function recoverData(setRatings, setLoadedMediaTypes, setLoaded) {\r\n  const sessionRatings = sessionStorage.getItem('ratings');\r\n\r\n  // load data from session storage\r\n  if (sessionRatings) {\r\n    const ratingsJSON = await JSON.parse(sessionRatings);\r\n    const ratings = await recoverDates(ratingsJSON);\r\n    setRatings(ratings);\r\n    console.log(ratings);\r\n    setLoadedMediaTypes(\r\n      sessionStorage\r\n        .getItem('mediaTypes')\r\n        .split(',')\r\n        .map(item => parseInt(item))\r\n    );\r\n    setLoaded(true);\r\n  }\r\n}\r\n\r\n/**\r\n * Convert Date Strings to Javascript Dates\r\n * @param {Array} ratings\r\n * @return {Array}\r\n */\r\nasync function recoverDates(ratings) {\r\n  return ratings.map(rating => {\r\n    rating.dateRated = new Date(rating.dateRated);\r\n    return rating;\r\n  });\r\n}\r\n\r\nexport default recoverData;\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './App.scss';\r\nimport Uploader from './components/Uploader';\r\nimport TitleBar from './components/TitleBar';\r\nimport Sidebar from './components/Sidebar';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport routes from './util/routes';\r\nimport recoverData from './util/recoverData';\r\n\r\nconst App = () => {\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [ratings, setRatings] = useState();\r\n  const [loadedMediaTypes, setLoadedMediaTypes] = useState();\r\n\r\n  useEffect(() => {\r\n    if (!loaded) {\r\n      recoverData(setRatings, setLoadedMediaTypes, setLoaded);\r\n    }\r\n  }, [loaded]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <TitleBar />\r\n      <div className=\"main-content\">\r\n        {loaded ? (\r\n          <Router>\r\n            <LoadedApp ratings={ratings} loadedMediaTypes={loadedMediaTypes} />\r\n          </Router>\r\n        ) : (\r\n          <Uploader\r\n            setLoaded={setLoaded}\r\n            setRatings={setRatings}\r\n            setLoadedMediaTypes={setLoadedMediaTypes}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst LoadedApp = ({ ratings, loadedMediaTypes }) => {\r\n  const [filteredRatings, setFilteredRatings] = useState(ratings);\r\n\r\n  const filterMovies = filterMap => {\r\n    const filtered = ratings.filter(\r\n      rating => filterMap.get(rating.mediaTypeId) === true\r\n    );\r\n\r\n    setFilteredRatings(filtered);\r\n  };\r\n\r\n  const routeComponents = routes.map(({ path, component: Component, name }) => {\r\n    return (\r\n      <Route\r\n        exact\r\n        path={`${process.env.PUBLIC_URL}${path}`}\r\n        render={() => <Component ratings={filteredRatings} />}\r\n        key={name}\r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <Sidebar\r\n        loadedMediaTypes={loadedMediaTypes}\r\n        filterMovies={filterMovies}\r\n      />\r\n      {routeComponents}\r\n      {/* <RatingsTable ratings={ratings} /> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nLoadedApp.propTypes = {\r\n  ratings: PropTypes.array,\r\n  loadedMediaTypes: PropTypes.array,\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\n/**\n * Registers a Service Worker\n * @param {Object} config\n */\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\n/**\n * Register a Valid Service Worker\n * @param {String} swUrl\n * @param {Object} config\n */\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\n/**\n * Check a valid Service Worker\n * @param {String} swUrl\n * @param {Object} config\n */\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\n/**\n * Unregister Service worker\n */\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}