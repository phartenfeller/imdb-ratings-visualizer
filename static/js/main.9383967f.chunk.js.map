{"version":3,"sources":["App.scss","components/TitleBar.scss","components/Sidebar.scss","components/RatingsTable.scss","util/fileUpload.js","components/Uploader.js","components/TitleBar.js","components/RatingsTable.js","components/Dashboard.js","util/routes.js","components/Sidebar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","colorBlack","creamYellow","separator","uploadFile","_callee","file","csv","regenerator_default","a","wrap","_context","prev","next","readFile","sent","abrupt","csvToJson","stop","Promise","resolve","reject","fileReader","FileReader","onloadend","event","content","target","result","onerror","err","readAsText","rawCsv","lines","replace","changeHeaders","v","cleanData","split","console","log","data","headers","map","line","indexLine","obj","currentline","header","indexHeader","push","pop","review","rating","parseInt","runtime","votes","year","imdbRating","parseFloat","dateRated","Date","dateRatedString","Uploader","_ref","setLoaded","setRatings","upload","_ref2","Object","asyncToGenerator","mark","json","document","getElementById","files","sessionStorage","setItem","JSON","stringify","apply","this","arguments","react_default","createElement","className","type","id","onChange","TitleBar","RatingsTable","ratings","nextText","style","verticalAlign","previousText","es","columns","Header","accessor","defaultSorted","desc","defaultPageSize","pageSizeOptions","minRows","colors","countOccurences","ratingsArray","counts","1","2","3","4","5","6","7","8","9","10","i","length","num","arr","AverageRatings","ratingsData","ratingsCount","options","plotOptions","bar","dataLabels","position","distributed","enabled","formatter","val","Math","round","offsetY","fontSize","xaxis","categories","labels","tooltip","yaxis","axisBorder","show","axisTicks","title","text","floating","align","color","series","name","react_apexcharts_min_default","height","width","routes","icon","path","component","Dashboard_AverageRatings","SidebarElements","_useState","useState","find","route","window","location","pathname","_useState2","slicedToArray","active","setActive","key","Link","to","onClick","Sidebar","Sidebar_SidebarElements","LoadedApp","routeComponents","Component","Route","exact","render","src_components_Sidebar","App","loaded","_useState3","_useState4","useEffect","sessionData","getItem","parse","src_components_TitleBar","BrowserRouter","App_LoadedApp","src_components_Uploader","Boolean","hostname","match","ReactDOM","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9383967f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"colorBlack\":\"black\",\"creamYellow\":\"#ffee70\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"colorBlack\":\"black\",\"creamYellow\":\"#ffee70\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"colorBlack\":\"black\",\"creamYellow\":\"#ffee70\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"colorBlack\":\"black\",\"creamYellow\":\"#ffee70\"};","const separator = '***';\r\n\r\n/**\r\n * Upload Process for File\r\n * @param {Blob} file\r\n * @return {JSON}\r\n */\r\nasync function uploadFile(file) {\r\n  const csv = await readFile(file);\r\n  return csvToJson(csv);\r\n}\r\n\r\n/**\r\n * Read Contents of a File\r\n * @param {Blob} file\r\n * @return {String}\r\n */\r\nfunction readFile(file) {\r\n  return new Promise((resolve, reject) => {\r\n    const fileReader = new FileReader();\r\n    fileReader.onloadend = event => {\r\n      const content = event.target.result;\r\n      resolve(content);\r\n    };\r\n\r\n    fileReader.onerror = err => {\r\n      reject(err);\r\n    };\r\n    fileReader.readAsText(file, 'Windows-1252');\r\n  });\r\n}\r\n\r\n/**\r\n * Translate CSV to JSON\r\n * @param {String} rawCsv\r\n * @return {JSON}\r\n */\r\nfunction csvToJson(rawCsv) {\r\n  const csv = cleanData(rawCsv);\r\n\r\n  const lines = csv.split('\\n');\r\n  console.log(lines[0]);\r\n  let result = [];\r\n  const headers = lines[0].split(separator);\r\n\r\n  lines.map((line, indexLine) => {\r\n    if (indexLine < 1) return result; // Jump header line\r\n\r\n    const obj = {};\r\n    const currentline = line.split(separator);\r\n\r\n    headers.map((header, indexHeader) => {\r\n      obj[header] = currentline[indexHeader];\r\n      return obj;\r\n    });\r\n\r\n    result.push(obj);\r\n    return result;\r\n  });\r\n\r\n  result.pop(); // remove the last item because undefined values\r\n\r\n  result = convertDatatypes(result);\r\n\r\n  console.log(result);\r\n  return result;\r\n}\r\n\r\n/**\r\n * Clean CSV Data\r\n * @param {String} csv\r\n * @return {String}\r\n */\r\nfunction cleanData(csv) {\r\n  let cleanedCsv;\r\n  cleanedCsv = changeHeaders(csv);\r\n  // change all commas in titles to ###\r\n  cleanedCsv = cleanedCsv.replace(/\"[^\"]+\"/g, v => {\r\n    return v.replace(/,/g, '###');\r\n  });\r\n\r\n  // change all comma seperators to own separator\r\n  cleanedCsv = cleanedCsv.replace(/,/g, separator);\r\n\r\n  // change back to commas in title\r\n  cleanedCsv = cleanedCsv.replace(/###/g, ',');\r\n\r\n  // remove quotes in titles\r\n  cleanedCsv = cleanedCsv.replace(/\"/g, '');\r\n\r\n  return cleanedCsv;\r\n}\r\n\r\n/**\r\n * Change Headers of CSV\r\n * @param {String} csv\r\n * @return {String}\r\n */\r\nfunction changeHeaders(csv) {\r\n  let cleanedCsv;\r\n  cleanedCsv = csv.replace('Const,', 'id,');\r\n  cleanedCsv = cleanedCsv.replace('Your Rating,', 'rating,');\r\n  cleanedCsv = cleanedCsv.replace('Title,', 'title,');\r\n  cleanedCsv = cleanedCsv.replace('Date Rated,', 'dateRatedString,');\r\n  cleanedCsv = cleanedCsv.replace('Genres,', 'genres,');\r\n  cleanedCsv = cleanedCsv.replace('Title Type,', 'titleType,');\r\n  cleanedCsv = cleanedCsv.replace('Directors,', 'directors,');\r\n  cleanedCsv = cleanedCsv.replace('Num Votes,', 'votes,');\r\n  cleanedCsv = cleanedCsv.replace('Runtime (mins),', 'runtime,');\r\n  cleanedCsv = cleanedCsv.replace('Release Date,', 'releaseDate,');\r\n  cleanedCsv = cleanedCsv.replace('URL,', 'url,');\r\n  cleanedCsv = cleanedCsv.replace('Year,', 'year,');\r\n  cleanedCsv = cleanedCsv.replace('Directors,', 'directors,');\r\n  cleanedCsv = cleanedCsv.replace('IMDb Rating,', 'imdbRating,');\r\n  return cleanedCsv;\r\n}\r\n\r\n/**\r\n * Covert Strings to corresponding datatypes\r\n * @param {Array} data\r\n * @return {Array}\r\n */\r\nfunction convertDatatypes(data) {\r\n  data.map(review => {\r\n    review.rating = parseInt(review.rating);\r\n    review.runtime = parseInt(review.runtime);\r\n    review.votes = parseInt(review.votes);\r\n    review.year = parseInt(review.year);\r\n    review.imdbRating = parseFloat(review.imdbRating);\r\n    review.dateRated = new Date(review.dateRatedString);\r\n    return review;\r\n  });\r\n\r\n  return data;\r\n}\r\n\r\nexport { uploadFile };\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { uploadFile } from '../util/fileUpload';\r\nimport './Uploader.scss';\r\n\r\nconst Uploader = ({ setLoaded, setRatings }) => {\r\n  const upload = async () => {\r\n    const file = document.getElementById('fileUpload').files[0];\r\n    const json = await uploadFile(file);\r\n    setRatings(json);\r\n    setLoaded(true);\r\n    sessionStorage.setItem('ratings', JSON.stringify(json));\r\n  };\r\n\r\n  return (\r\n    <div className=\"uploader\">\r\n      <h1>Upload IMDb Ratings CSV</h1>\r\n      <input type=\"file\" id=\"fileUpload\" onChange={upload} />\r\n    </div>\r\n  );\r\n};\r\n\r\nUploader.propTypes = {\r\n  setLoaded: PropTypes.func,\r\n  setRatings: PropTypes.func,\r\n};\r\n\r\nexport default Uploader;\r\n","import React from 'react';\r\nimport './TitleBar.scss';\r\n\r\nconst TitleBar = () => {\r\n  return (\r\n    <div className=\"title-bar\">\r\n      <span className=\"app-name\">IMDb Ratings Visualizer</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TitleBar;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ReactTable from 'react-table';\r\nimport './RatingsTable.scss';\r\n\r\nconst RatingsTable = ({ ratings }) => {\r\n  const columns = [\r\n    {\r\n      Header: 'ID',\r\n      accessor: 'id',\r\n    },\r\n    {\r\n      Header: 'Title',\r\n      accessor: 'title',\r\n    },\r\n    {\r\n      Header: 'Rating',\r\n      accessor: 'rating',\r\n    },\r\n    {\r\n      Header: 'Type',\r\n      accessor: 'titleType',\r\n    },\r\n    {\r\n      Header: 'Date Rated',\r\n      accessor: 'dateRatedString',\r\n    },\r\n    {\r\n      Header: 'Genres',\r\n      accessor: 'genres',\r\n    },\r\n  ];\r\n\r\n  const defaultSorted = [\r\n    {\r\n      id: 'rating',\r\n      desc: true,\r\n    },\r\n  ];\r\n\r\n  const nextText = (\r\n    <span>\r\n      <span style={{ verticalAlign: 'middle' }}>Next</span>\r\n      <i className=\"material-icons pagination-icon\">keyboard_arrow_right</i>\r\n    </span>\r\n  );\r\n\r\n  const previousText = (\r\n    <span>\r\n      <i className=\"material-icons pagination-icon left-pagination-icon\">\r\n        keyboard_arrow_left\r\n      </i>\r\n      <span>Previous</span>\r\n    </span>\r\n  );\r\n\r\n  return (\r\n    <ReactTable\r\n      data={ratings}\r\n      // resolveData={data => data.map(row => row)}\r\n      columns={columns}\r\n      className=\"-striped -highlight main-component\"\r\n      defaultSorted={defaultSorted}\r\n      defaultPageSize={50}\r\n      pageSizeOptions={[5, 10, 20, 25, 50, 100, 250, 1000]}\r\n      nextText={nextText}\r\n      previousText={previousText}\r\n      minRows={0}\r\n    />\r\n  );\r\n};\r\n\r\nRatingsTable.propTypes = {\r\n  ratings: PropTypes.array,\r\n};\r\n\r\nexport default RatingsTable;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ReactApexCharts from 'react-apexcharts';\r\nimport './Dashboard.scss';\r\n\r\nconst colors = [\r\n  '#FF355E',\r\n  '#FD5B78',\r\n  '#FF6037',\r\n  '#FF9933',\r\n  '#FFCC33',\r\n  '#FFFF66',\r\n  '#CCFF00',\r\n  '#66FF66',\r\n  '#50BFE6',\r\n  '#FF00CC',\r\n];\r\n\r\nconst countOccurences = ratings => {\r\n  const ratingsArray = ratings.map(rating => rating.rating);\r\n  const counts = {\r\n    1: 0,\r\n    2: 0,\r\n    3: 0,\r\n    4: 0,\r\n    5: 0,\r\n    6: 0,\r\n    7: 0,\r\n    8: 0,\r\n    9: 0,\r\n    10: 0,\r\n  };\r\n\r\n  for (let i = 0; i < ratingsArray.length; i++) {\r\n    const num = ratingsArray[i];\r\n    counts[num] = counts[num] ? counts[num] + 1 : 1;\r\n  }\r\n\r\n  console.log(counts);\r\n\r\n  const arr = [];\r\n  for (let i = 1; i <= 10; i++) {\r\n    arr.push(counts[i]);\r\n  }\r\n\r\n  console.log(arr);\r\n  return arr;\r\n};\r\n\r\nconst Dashboard = ({ ratings }) => {\r\n  return (\r\n    <div>\r\n      <div className=\"main-component\">\r\n        Dashboard...\r\n        <AverageRatings\r\n          ratingsData={countOccurences(ratings)}\r\n          ratingsCount={ratings.length}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nDashboard.propTypes = {\r\n  ratings: PropTypes.array,\r\n};\r\n\r\nconst AverageRatings = ({ ratingsData, ratingsCount }) => {\r\n  const options = {\r\n    colors,\r\n    plotOptions: {\r\n      bar: {\r\n        dataLabels: {\r\n          position: 'top',\r\n        },\r\n        distributed: true,\r\n      },\r\n    },\r\n    dataLabels: {\r\n      enabled: true,\r\n      formatter: val => {\r\n        return Math.round((val / ratingsCount) * 100) + '%';\r\n      },\r\n      offsetY: -20,\r\n      style: {\r\n        fontSize: '12px',\r\n        colors: ['#ffffff'],\r\n      },\r\n    },\r\n    xaxis: {\r\n      categories: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'],\r\n      labels: {\r\n        style: {\r\n          colors,\r\n        },\r\n      },\r\n      tooltip: {\r\n        enabled: true,\r\n      },\r\n    },\r\n    // fill: {\r\n    //   type: 'solid',\r\n    //   colors,\r\n    //   gradient: {\r\n    //     shade: 'light',\r\n    //     type: 'horizontal',\r\n    //     shadeIntensity: 0.25,\r\n    //     gradientToColors: undefined,\r\n    //     inverseColors: true,\r\n    //     opacityFrom: 1,\r\n    //     opacityTo: 1,\r\n    //     stops: [50, 0, 100, 100],\r\n    //   },\r\n    // },\r\n    yaxis: {\r\n      axisBorder: {\r\n        show: false,\r\n      },\r\n      axisTicks: {\r\n        show: false,\r\n      },\r\n    },\r\n    title: {\r\n      text: 'Ratings per Stars',\r\n      floating: true,\r\n      align: 'center',\r\n      style: {\r\n        color: '#ffffff',\r\n      },\r\n    },\r\n  };\r\n\r\n  const series = [\r\n    {\r\n      name: 'Ratings',\r\n      data: ratingsData,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"chart-container\">\r\n      <ReactApexCharts\r\n        options={options}\r\n        series={series}\r\n        type=\"bar\"\r\n        height=\"350\"\r\n        width=\"600\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nAverageRatings.propTypes = {\r\n  ratingsData: PropTypes.array,\r\n  ratingsCount: PropTypes.number,\r\n};\r\n\r\nexport default Dashboard;\r\n","import RatingsTable from '../components/RatingsTable';\r\nimport Dashboard from '../components/Dashboard';\r\n\r\nconst routes = [\r\n  {\r\n    name: 'Dashboard',\r\n    icon: 'bubble_chart',\r\n    path: '/',\r\n    component: Dashboard,\r\n  },\r\n  {\r\n    name: 'Ratings',\r\n    icon: 'list',\r\n    path: '/ratings',\r\n    component: RatingsTable,\r\n  },\r\n];\r\n\r\nexport default routes;\r\n","import React, { useState } from 'react';\r\nimport './Sidebar.scss';\r\nimport { Link } from 'react-router-dom';\r\nimport routes from '../util/routes';\r\n\r\n/**\r\n * returns active route name\r\n * @return {String}\r\n */\r\nfunction getActiveRoute() {\r\n  const currentRoute = routes.find(route => {\r\n    return route.path === window.location.pathname;\r\n  });\r\n\r\n  return currentRoute.name;\r\n}\r\n\r\nconst Sidebar = () => {\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <SidebarElements />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst SidebarElements = () => {\r\n  const [active, setActive] = useState(getActiveRoute());\r\n\r\n  const isActive = name => {\r\n    console.log('isActive =>', name);\r\n    return active === name;\r\n  };\r\n\r\n  return routes ? (\r\n    <div>\r\n      {routes.map(route => {\r\n        return (\r\n          <div key={route.name}>\r\n            <Link to={route.path} className=\"sidebar-link\">\r\n              <div className={isActive(route.name) ? 'active-tab' : ''}>\r\n                <div\r\n                  onClick={() => setActive(route.name)}\r\n                  className=\"sidebar-box\"\r\n                >\r\n                  <i className=\"material-icons sidebar-icon\">{route.icon}</i>\r\n                  <span className=\"sidebar-text\">{route.name}</span>\r\n                </div>\r\n              </div>\r\n            </Link>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  ) : (\r\n    'Loading'\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './App.scss';\r\nimport Uploader from './components/Uploader';\r\nimport TitleBar from './components/TitleBar';\r\nimport Sidebar from './components/Sidebar';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport routes from './util/routes';\r\n\r\nconst App = () => {\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [ratings, setRatings] = useState();\r\n\r\n  useEffect(() => {\r\n    if (!loaded) {\r\n      const sessionData = sessionStorage.getItem('ratings');\r\n\r\n      if (sessionData) {\r\n        setRatings(JSON.parse(sessionData));\r\n        setLoaded(true);\r\n      }\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <TitleBar />\r\n      <div className=\"main-content\">\r\n        {loaded ? (\r\n          <Router>\r\n            <LoadedApp ratings={ratings} />\r\n          </Router>\r\n        ) : (\r\n          <Uploader setLoaded={setLoaded} setRatings={setRatings} />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst LoadedApp = ({ ratings }) => {\r\n  const routeComponents = routes.map(({ path, component: Component, name }) => {\r\n    return (\r\n      <Route\r\n        exact\r\n        path={path}\r\n        render={() => <Component ratings={ratings} />}\r\n        key={name}\r\n        ratings={ratings}\r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <Sidebar />\r\n      {routeComponents}\r\n      {/* <RatingsTable ratings={ratings} /> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nLoadedApp.propTypes = {\r\n  ratings: PropTypes.array,\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\n/**\n * Registers a Service Worker\n * @param {Object} config\n */\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\n/**\n * Register a Valid Service Worker\n * @param {String} swUrl\n * @param {Object} config\n */\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\n/**\n * Check a valid Service Worker\n * @param {String} swUrl\n * @param {Object} config\n */\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\n/**\n * Unregister Service worker\n */\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}