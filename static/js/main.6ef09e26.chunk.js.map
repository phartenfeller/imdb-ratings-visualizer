{"version":3,"sources":["RatingsTable.js","App.js","helper/csvToJson.js","serviceWorker.js","index.js"],"names":["RatingsTable","ratings","JSON","parse","sessionStorage","getItem","react_default","a","createElement","map","rating","key","id","title","App","_React$useState","React","useState","_React$useState2","Object","slicedToArray","loaded","setLoaded","className","src_RatingsTable","type","onChange","file","Promise","resolve","reject","fileReader","FileReader","onloadend","event","content","target","result","onerror","err","readAsText","readFile","document","getElementById","files","then","csv","json","rawCsv","replace","lines","split","headers","line","indexLine","obj","currentline","header","indexHeader","push","pop","csvToJson","setItem","stringify","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oOAEA,IAgBeA,EAhBM,WACnB,IAAMC,EAAUC,KAAKC,MAAMC,eAAeC,QAAQ,YAElD,OACEC,EAAAC,EAAAC,cAAA,UACGP,EAAQQ,IAAI,SAAAC,GACX,OACEJ,EAAAC,EAAAC,cAAA,MAAIG,IAAKD,EAAOE,IACbF,EAAOG,MADV,KACmBH,EAAOA,YCoCrBI,EAzCH,WAAM,IAAAC,EACYC,IAAMC,UAAS,GAD3BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACTM,EADSH,EAAA,GACDI,EADCJ,EAAA,GA2BhB,OACEZ,EAAAC,EAAAC,cAAA,OAAKe,UAAU,OACZF,EACCf,EAAAC,EAAAC,cAACgB,EAAD,MAEAlB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,qCACAF,EAAAC,EAAAC,cAAA,SAAOiB,KAAK,OAAOb,GAAG,aAAac,SAhBxB,YAfF,SAAAC,GACf,OAAO,IAAIC,QAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAa,IAAIC,WACvBD,EAAWE,UAAY,SAAAC,GACrB,IAAMC,EAAUD,EAAME,OAAOC,OAC7BR,EAAQM,IAGVJ,EAAWO,QAAU,SAAAC,GACnBT,EAAOS,IAETR,EAAWS,WAAWb,MAMxBc,CADaC,SAASC,eAAe,cAAcC,MAAM,IAC1CC,KAAK,SAAAC,GAClB,IAAMC,ECrBZ,SAAmBC,GACjB,IAAIF,EAAME,EAAOC,QAAQ,SAAU,OAI7BC,GAFNJ,GADAA,EAAMA,EAAIG,QAAQ,eAAgB,YACxBA,QAAQ,SAAU,WAEVE,MAAM,MAClBd,EAAS,GACTe,EAAUF,EAAM,GAAGC,MAAM,KAiB/B,OAfAD,EAAMzC,IAAI,SAAC4C,EAAMC,GACf,KAAIA,EAAY,GAAhB,CAEA,IAAMC,EAAM,GACNC,EAAcH,EAAKF,MAAM,KAE/BC,EAAQ3C,IAAI,SAASgD,EAAQC,GAC3BH,EAAIE,GAAUD,EAAYE,KAG5BrB,EAAOsB,KAAKJ,MAGdlB,EAAOuB,MAEAvB,EDHUwB,CAAUf,GACvB1C,eAAe0D,QAAQ,UAAW5D,KAAK6D,UAAUhB,IACjDzB,GAAU,WEhBI0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhE,EAAAC,EAAAC,cAAC+D,EAAD,MAAS7B,SAASC,eAAe,SD4I3C,kBAAmB6B,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC","file":"static/js/main.6ef09e26.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst RatingsTable = () => {\r\n  const ratings = JSON.parse(sessionStorage.getItem('ratings'));\r\n\r\n  return (\r\n    <ul>\r\n      {ratings.map(rating => {\r\n        return (\r\n          <li key={rating.id}>\r\n            {rating.title}: {rating.rating}\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default RatingsTable;\r\n","import React from 'react';\nimport './App.css';\nimport { csvToJson } from './helper/csvToJson';\nimport RatingsTable from './RatingsTable';\n\nconst App = () => {\n  const [loaded, setLoaded] = React.useState(false);\n\n  const readFile = file => {\n    return new Promise((resolve, reject) => {\n      const fileReader = new FileReader();\n      fileReader.onloadend = event => {\n        const content = event.target.result;\n        resolve(content);\n      };\n\n      fileReader.onerror = err => {\n        reject(err);\n      };\n      fileReader.readAsText(file);\n    });\n  };\n\n  const uploadFile = () => {\n    const file = document.getElementById('fileUpload').files[0];\n    readFile(file).then(csv => {\n      const json = csvToJson(csv);\n      sessionStorage.setItem('ratings', JSON.stringify(json));\n      setLoaded(true);\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      {loaded ? (\n        <RatingsTable />\n      ) : (\n        <div>\n          <h1>Upload IMDb Ratings CSV</h1>\n          <input type=\"file\" id=\"fileUpload\" onChange={uploadFile} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","/**\r\n * Translate CSV to JSON\r\n * @param {String} rawCsv\r\n * @return {JSON}\r\n */\r\nfunction csvToJson(rawCsv) {\r\n  let csv = rawCsv.replace('Const,', 'id,');\r\n  csv = csv.replace('Your Rating,', 'rating,');\r\n  csv = csv.replace('Title,', 'title,');\r\n\r\n  const lines = csv.split('\\n');\r\n  const result = [];\r\n  const headers = lines[0].split(',');\r\n\r\n  lines.map((line, indexLine) => {\r\n    if (indexLine < 1) return; // Jump header line\r\n\r\n    const obj = {};\r\n    const currentline = line.split(',');\r\n\r\n    headers.map(function(header, indexHeader) {\r\n      obj[header] = currentline[indexHeader];\r\n    });\r\n\r\n    result.push(obj);\r\n  });\r\n\r\n  result.pop(); // remove the last item because undefined values\r\n\r\n  return result; // JavaScript object\r\n}\r\n\r\nexport { csvToJson };\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\n/**\n * Registers a Service Worker\n * @param {Object} config\n */\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\n/**\n * Register a Valid Service Worker\n * @param {String} swUrl\n * @param {Object} config\n */\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\n/**\n * Check a valid Service Worker\n * @param {String} swUrl\n * @param {Object} config\n */\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\n/**\n * Unregister Service worker\n */\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}